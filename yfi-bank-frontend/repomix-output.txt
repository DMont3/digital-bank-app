This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-30T19:13:54.120Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.jsx
index.html
package.json
public/index.html
public/manifest.json
public/robots.txt
public/vite.svg
README.md
src/App.tsx
src/assets/react.svg
src/components/common/Chart/Chart.tsx
src/components/common/CTASection/CTASection.tsx
src/components/common/CustomButton/CustomButton.tsx
src/components/common/PrivateRoute/PrivateRoute.tsx
src/components/common/Table/Table.tsx
src/components/common/WhyChooseSection/WhyChooseSection.tsx
src/components/layout/Footer/Footer.tsx
src/components/layout/Header/Header.tsx
src/env.d.ts
src/hooks/useAuth.ts
src/index.tsx
src/pages/Contato/components/ContactChannelsSection/ContactChannelsSection.tsx
src/pages/Contato/components/HeroSection/HeroSection.tsx
src/pages/Contato/index.tsx
src/pages/Dashboard/components/BTC.tsx
src/pages/Dashboard/components/DashboardMenu.tsx
src/pages/Dashboard/components/Negociar.tsx
src/pages/Dashboard/index.tsx
src/pages/Home/components/CryptoSection/CryptoSection.tsx
src/pages/Home/components/FAQSection/FAQSection.tsx
src/pages/Home/components/FeaturesSection/FeaturesSection.tsx
src/pages/Home/components/HeroSection/HeroSection.tsx
src/pages/Home/components/SecuritySection/SecuritySection.tsx
src/pages/Home/components/SignupSection/SignupSection.tsx
src/pages/Home/index.tsx
src/pages/Login/components/LoginForm/LoginForm.tsx
src/pages/Login/index.tsx
src/pages/Profile/index.tsx
src/pages/Servicos/components/HeroSection/HeroSection.tsx
src/pages/Servicos/components/ServicesSection/ServicesSection.tsx
src/pages/Servicos/index.tsx
src/pages/Signup/components/AddressStep/AddressStep.tsx
src/pages/Signup/components/CepStep/CepStep.tsx
src/pages/Signup/components/EmailStep/EmailStep.tsx
src/pages/Signup/components/EmailVerificationStep/EmailVerificationStep.tsx
src/pages/Signup/components/PasswordStep/PasswordStep.tsx
src/pages/Signup/components/PersonalInfoStep/PersonalInfoStep.tsx
src/pages/Signup/components/PhoneStep/PhoneStep.tsx
src/pages/Signup/components/PhoneVerificationStep/PhoneVerificationStep.tsx
src/pages/Signup/components/StepProgress/StepProgress.tsx
src/pages/Signup/components/SuccessStep/SuccessStep.tsx
src/pages/Signup/components/TimerDisplay/TimerDisplay.tsx
src/pages/Signup/index.tsx
src/pages/Sobre/components/HeroSection/HeroSection.tsx
src/pages/Sobre/components/ValuesSection/ValuesSection.tsx
src/pages/Sobre/components/VisionSection/VisionSection.tsx
src/pages/Sobre/index.tsx
src/services/api.ts
src/services/supabaseClient.ts
src/stores/appStore.ts
src/stores/signupStore.ts
src/theme.tsx
src/types/common.ts
src/types/images.d.ts
src/utils/formatters.ts
src/utils/sanitizers.ts
src/utils/validation.ts
tsconfig.json
vite.config.jsx

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Dependencies
node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build
/build
/dist

# Testing
/coverage

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

================
File: eslint.config.jsx
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/index.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "yfi-bank",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "jest"
  },
  "dependencies": {
    "@emotion/react": "^11.13.5",
    "@emotion/styled": "^11.13.5",
    "@mui/icons-material": "^6.1.10",
    "@mui/material": "^6.1.10",
    "@supabase/supabase-js": "^2.47.3",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/chart.js": "^2.9.41",
    "@types/crypto-js": "^4.2.2",
    "@types/dompurify": "^3.0.5",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.7.9",
    "chart.js": "^4.4.7",
    "crypto-js": "^4.2.0",
    "dompurify": "^3.2.3",
    "framer-motion": "^11.11.17",
    "mui": "^0.0.1",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-cookie": "^7.2.2",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-router-dom": "^7.0.2",
    "react-scroll": "^1.9.0",
    "react-slick": "^0.30.2",
    "slick-carousel": "^1.8.1",
    "web-vitals": "^2.1.4",
    "zustand": "^5.0.2"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.0",
    "@babel/preset-typescript": "^7.26.0",
    "@eslint/js": "^9.15.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.1",
    "@types/react": "^18.3.14",
    "@types/react-dom": "^18.3.2",
    "@types/react-slick": "^0.23.13",
    "@vitejs/plugin-react": "^4.3.4",
    "babel-jest": "^29.7.0",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "typescript": "^5.7.2",
    "vite": "^6.0.1"
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: src/App.tsx
================
// src/App.tsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';
import { ThemeProvider } from '@mui/material';
import theme from './theme';
import Header from './components/layout/Header/Header';
import Footer from './components/layout/Footer/Footer';
import HomePage from './pages/Home';
import SignupPage from './pages/Signup';
import LoginPage from './pages/Login';
import SobrePage from './pages/Sobre';
import ServicosPage from './pages/Servicos';
import ContatoPage from './pages/Contato';
import DashboardPage from './pages/Dashboard';
import ProfilePage from './pages/Profile';
import { PrivateRoute } from './components/common/PrivateRoute/PrivateRoute';

const AppContent: React.FC = () => {
    const location = useLocation();
    const hideFooterPaths = ['/login', '/signup'];
    const shouldShowFooter = !hideFooterPaths.includes(location.pathname);

    return (
        <div style={{ 
            display: 'flex', 
            flexDirection: 'column',
            minHeight: '100vh'
        }}>
            <Header />
            <main style={{ flex: 1 }}>
                <Routes>
                    {/* Rotas públicas */}
                    <Route path="/" element={<HomePage />} />
                    <Route path="/signup" element={<SignupPage />} />
                    <Route path="/login" element={<LoginPage />} />
                    <Route path="/sobre" element={<SobrePage />} />
                    <Route path="/servicos" element={<ServicosPage />} />
                    <Route path="/contato" element={<ContatoPage />} />

                    {/* Rotas protegidas */}
                    <Route path="/dashboard" element={
                        <PrivateRoute>
                            <DashboardPage />
                        </PrivateRoute>
                    } />
                    <Route path="/profile" element={
                        <PrivateRoute>
                            <ProfilePage />
                        </PrivateRoute>
                    } />
                </Routes>
            </main>
            {shouldShowFooter && <Footer />}
        </div>
    );
};

const App: React.FC = () => {
    return (
        <ThemeProvider theme={theme}>
            <Router>
                <AppContent />
            </Router>
        </ThemeProvider>
    );
};

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/common/Chart/Chart.tsx
================
import React from 'react';
import { Box, useTheme } from '@mui/material';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface ChartProps {
  data: {
    labels: string[];
    datasets: {
      label: string;
      data: number[];
      borderColor?: 'primary' | 'secondary' | 'error' | 'warning' | 'info' | 'success';
      backgroundColor?: 'primary' | 'secondary' | 'error' | 'warning' | 'info' | 'success';
    }[];
  };
  title: string;
}

interface ChartOptions {
  responsive: boolean;
  plugins: {
    legend: {
      position: 'top';
    };
    title: {
      display: boolean;
      text: string;
    };
  };
}

const Chart: React.FC<ChartProps> = ({ data, title }) => {
  const theme = useTheme();

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: title,
      },
    },
  };

  const themedData = {
    ...data,
    datasets: data.datasets.map(dataset => ({
      ...dataset,
      borderColor: dataset.borderColor ? theme.palette[dataset.borderColor].main : theme.palette.primary.main,
      backgroundColor: dataset.backgroundColor ? theme.palette[dataset.backgroundColor].light : theme.palette.primary.light,
    })),
  };

  return (
    <Box>
      <Line options={options} data={themedData} />
    </Box>
  );
};

export default Chart;

================
File: src/components/common/CTASection/CTASection.tsx
================
import React from 'react';
import { Box, Typography, Container } from '@mui/material';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import CustomButton from '../CustomButton/CustomButton';
import type { FC } from 'react';

const CTASection: FC = () => {
    const navigate = useNavigate();

    return (
        <Box
            component="section"
            sx={{
                backgroundColor: '#000000',
                py: 10,
                color: 'white'
            }}
        >
            <Container maxWidth="md">
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                    viewport={{ once: true }}
                >
                    <Typography
                        variant="h3"
                        component="h2"
                        align="center"
                        gutterBottom
                        sx={{ fontWeight: 'bold' }}
                    >
                        Pronto para uma experiência bancária única?
                    </Typography>
                    <Typography
                        variant="h6"
                        align="center"
                        paragraph
                        sx={{ mb: 4, opacity: 0.9 }}
                    >
                        Junte-se ao YFI Bank e descubra um novo conceito em serviços financeiros
                    </Typography>
                    <Box
                        sx={{
                            display: 'flex',
                            justifyContent: 'center',
                            mt: 4
                        }}
                    >
                        <CustomButton
                            onClick={() => navigate('/signup')}
                            sx={{
                                py: 2,
                                px: 4,
                                fontSize: '1.1rem'
                            }}
                        >
                            Abra sua conta
                        </CustomButton>
                    </Box>
                </motion.div>
            </Container>
        </Box>
    );
};

export default CTASection;

================
File: src/components/common/CustomButton/CustomButton.tsx
================
import { Button, ButtonPropsColorOverrides } from '@mui/material';
import { styled } from '@mui/material/styles';
import { CustomButtonProps } from '../../../types/common';
import React from 'react';
import { OverridableStringUnion } from '@mui/types';

const StyledButton = styled(Button)<CustomButtonProps>(({ theme, variant = 'contained', color = 'primary' }: {
    theme: any;
    variant?: 'contained' | 'outlined' | 'text';
    color?: OverridableStringUnion<"primary" | "secondary" | "error" | "warning" | "info" | "success" | "inherit", ButtonPropsColorOverrides>;
  }) => ({
    borderRadius: '12px',
    padding: '12px 24px',
    fontWeight: 600,
    textTransform: 'none',
    fontSize: '1rem',
    transition: 'all 0.3s ease',

    ...(variant === 'contained' && {
        background: theme.palette[color as keyof typeof theme.palette]?.main,
        color: theme.palette.getContrastText(theme.palette[color as keyof typeof theme.palette]?.main ?? theme.palette.primary.main), // Use the specified color for contrast text
        boxShadow: theme.shadows[2],
        '&:hover': {
            background: theme.palette[color as keyof typeof theme.palette]?.light,
            boxShadow: theme.shadows[4],
            transform: 'translateY(-2px)',
        }
    }),

    ...(variant === 'outlined' && {
        border: `2px solid ${theme.palette.primary.main}`,
        color: theme.palette.primary.main,
        '&:hover': {
            background: theme.palette.primary.light,
            transform: 'translateY(-2px)',
        }
    }),

    // Responsive sizes
    ...(theme.breakpoints.down('sm') && {
        padding: '8px 16px',
        fontSize: '0.9rem',
    })
}));

const CustomButton: React.FC<CustomButtonProps> = (props) => {
    return <StyledButton {...props} />;
};

export default CustomButton;

================
File: src/components/common/PrivateRoute/PrivateRoute.tsx
================
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../../hooks/useAuth';

interface PrivateRouteProps {
    children: React.ReactNode;
}

export function PrivateRoute({ children }: PrivateRouteProps) {
    const { user, loading } = useAuth();

    if (loading) {
        return <div>Carregando...</div>;
    }

    if (!user) {
        return <Navigate to="/login" />;
    }

    return <>{children}</>;
}

================
File: src/components/common/Table/Table.tsx
================
import React from 'react';
import { Paper, Table as MUITable, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';

interface TableProps<T> {
  data: T[];
  columns: {
    key: keyof T;
    label: string;
    render?: (value: T[keyof T]) => React.ReactNode;
  }[];
}

const Table = <T extends object>({ data, columns }: TableProps<T>) => {
  return (
    <TableContainer component={Paper}>
      <MUITable sx={{ minWidth: 650 }} aria-label="simple table">
        <TableHead>
          <TableRow>
            {columns.map((column) => (
              <TableCell key={String(column.key)}>{column.label}</TableCell>
            ))}
          </TableRow>
        </TableHead>
        <TableBody>
          {data.map((row, index) => (
            <TableRow key={index}>
              {columns.map((column) => (
                <TableCell key={`${index}-${String(column.key)}`}>
                  {column.render ? column.render(row[column.key]) : String(row[column.key])}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableBody>
      </MUITable>
    </TableContainer>
  );
};

export default Table;

================
File: src/components/common/WhyChooseSection/WhyChooseSection.tsx
================
import React from 'react';
import { Box, Container, Grid, Typography } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { motion } from 'framer-motion';
import { FaShieldAlt, FaUserClock, FaChartLine } from 'react-icons/fa';
import { WhyChooseSectionFeature } from '../../../types/common';

const reasons: WhyChooseSectionFeature[] = [
  {
    icon: <FaShieldAlt />,
    title: "Segurança Avançada",
    description: "Tecnologia blockchain e criptografia de ponta para proteger seus ativos digitais com máxima segurança."
  },
  {
    icon: <FaUserClock />,
    title: "Serviços Premium",
    description: "Atendimento personalizado 24/7 e benefícios exclusivos para nossos clientes empresariais."
  },
  {
    icon: <FaChartLine />,
    title: "Investimentos Inovadores",
    description: "Acesso a produtos financeiros únicos e oportunidades de investimento em criptomoedas."
  }
];

const WhyChooseSection: React.FC = () => {
  const theme = useTheme();

  return (
    <Box
      component="section"
      sx={{
        backgroundColor: theme.palette.background.paper,
        py: 8
      }}
    >
      <Container maxWidth="lg">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <Typography
            variant="h2"
            component="h2"
            align="center"
            color="secondary"
            gutterBottom
            sx={{
              mb: 6,
              fontWeight: 'bold',
              background: `linear-gradient(45deg, ${theme.palette.primary.main}, ${theme.palette.secondary.main})`,
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
            }}
          >
            Por que escolher o YFI Bank?
          </Typography>
        </motion.div>

        <Grid container spacing={4}>
          {reasons.map((reason, index) => (
            <Grid item xs={12} md={4} key={index}>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                <Box
                  sx={{
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    textAlign: 'center',
                    transition: 'transform 0.3s ease-in-out',
                    '&:hover': {
                      transform: 'translateY(-8px)',
                    },
                  }}
                >
                  <Box
                    sx={{
                      color: theme.palette.primary.main,
                      fontSize: '3rem',
                      mb: 2,
                    }}
                  >
                    {reason.icon}
                  </Box>
                  <Typography
                    variant="h5"
                    component="h3"
                    color="secondary"
                    gutterBottom
                    sx={{ fontWeight: 'bold' }}
                  >
                    {reason.title}
                  </Typography>
                  <Typography
                    variant="body1"
                    color="secondary"
                    sx={{ opacity: 0.8 }}
                  >
                    {reason.description}
                  </Typography>
                </Box>
              </motion.div>
            </Grid>
          ))}
        </Grid>
      </Container>
    </Box>
  );
};

export default WhyChooseSection;

================
File: src/components/layout/Footer/Footer.tsx
================
// src/components/layout/Footer/Footer.tsx
import React from 'react';
import {
    Box,
    Typography,
    Container,
    Grid,
    Link as MuiLink,
    IconButton,
} from '@mui/material';
import { FaLinkedin, FaInstagram, FaTwitter, FaBuilding } from 'react-icons/fa';
import { FooterProps } from '../../../types/common';

const Footer: React.FC<FooterProps> = ({
    socialLinks = {
        linkedin: 'https://www.linkedin.com/company/yfi-bank/',
        instagram: 'https://www.instagram.com',
        twitter: 'https://www.twitter.com'
    }
}) => {
    return (
        <Box component="footer" sx={{ backgroundColor: '#1e1e1e', color: '#ffffff', paddingY: 6 }}>
            <Container>
                <Grid container spacing={4} justifyContent="space-between" alignItems="flex-start">
                    {/* Logotipo e Redes Sociais */}
                    <Grid item xs={12} sm={4} md={3}>
                        <Box display="flex" alignItems="center" flexDirection="column">
                            <Box display="flex" alignItems="center" marginBottom={2}>
                                <FaBuilding size={24} color="#ffffff" /> {/* Mesmo tamanho que no Header */}
                                <Typography variant="h6" component="div" sx={{ marginLeft: 1, color: '#ffffff' }}>
                                    YFI BANK
                                </Typography>
                            </Box>
                            <Box>
                                <IconButton
                                    component="a"
                                    href={socialLinks.linkedin}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    sx={{ color: '#ffffff' }}
                                >
                                    <FaLinkedin />
                                </IconButton>
                                <IconButton
                                    component="a"
                                    href={socialLinks.instagram}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    sx={{ color: '#ffffff' }}
                                >
                                    <FaInstagram />
                                </IconButton>
                                <IconButton
                                    component="a"
                                    href={socialLinks.twitter}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    sx={{ color: '#ffffff' }}
                                >
                                    <FaTwitter />
                                </IconButton>
                            </Box>
                        </Box>
                    </Grid>

                    {/* Links Institucionais */}
                    <Grid item xs={12} sm={8} md={6}>
                        <Grid container spacing={2} justifyContent="center">
                            <Grid item xs={12} sm={4}>
                                <Typography variant="h6" gutterBottom>
                                    Institucional
                                </Typography>
                                <MuiLink href="/sobre" color="inherit" underline="hover" display="block">
                                    Quem somos
                                </MuiLink>
                            </Grid>
                            <Grid item xs={12} sm={4}>
                                <Typography variant="h6" gutterBottom>
                                    Termos
                                </Typography>
                                <MuiLink href="#terms" color="inherit" underline="hover" display="block">
                                    Termos de uso
                                </MuiLink>
                                <MuiLink href="#privacy" color="inherit" underline="hover" display="block">
                                    Proteção de dados
                                </MuiLink>
                                <MuiLink href="#cookies" color="inherit" underline="hover" display="block">
                                    Aviso de cookies
                                </MuiLink>
                            </Grid>
                            <Grid item xs={12} sm={4}>
                                <Typography variant="h6" gutterBottom>
                                    Suporte
                                </Typography>
                                <MuiLink href="#support" color="inherit" underline="hover" display="block">
                                    Central de ajuda
                                </MuiLink>
                            </Grid>
                        </Grid>
                    </Grid>
                </Grid>

                {/* Direitos Reservados */}
                <Box sx={{ borderTop: '1px solid #ffffff', marginTop: 4, paddingTop: 2, textAlign: 'center' }}>
                    <Typography variant="body2">
                        2024 &copy; Todos os direitos reservados - YFI BANK
                    </Typography>
                </Box>
            </Container>
        </Box>
    );
};

export default Footer;

================
File: src/components/layout/Header/Header.tsx
================
import React from 'react';
import {
    AppBar,
    Toolbar,
    Typography,
    Button,
    IconButton,
    Box,
    Drawer,
    List,
    ListItem,
    ListItemText,
    useMediaQuery,
    useTheme,
    Avatar,
    Menu,
    MenuItem,
} from '@mui/material';
import { FaBuilding } from 'react-icons/fa';
import logo from '../../../assets/logo.png';
import MenuIcon from '@mui/icons-material/Menu';
import { Link as RouterLink, useNavigate, useLocation } from 'react-router-dom';
import CustomButton from '../../common/CustomButton/CustomButton';
import { NavItem } from '../../../types/common';
import { useAuth } from '../../../hooks/useAuth';
import { api } from '../../../services/api';
import { formatCurrency } from '../../../utils/formatters';
import { useAppStore } from '../../../stores/appStore';

interface HeaderProps {
    navItems?: NavItem[];
}

const Header: React.FC<HeaderProps> = ({ navItems = [
  { label: 'Sobre', to: '/sobre' },
  { label: 'Serviços', to: '/servicos' },
  { label: 'Contato', to: '/contato' },
] }) => {
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null); // Moved here
  const open = Boolean(anchorEl); // Moved here

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const navigate = useNavigate();
  const { user } = useAuth();
  const location = useLocation();
  const isDashboardRoute = location.pathname.startsWith('/dashboard');

  const handleClick = (event: React.MouseEvent<HTMLElement>) => {
      setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
      setAnchorEl(null);
  };

  const handleLogout = async () => {
      try {
          await api.post('/auth/logout');
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          document.cookie = 'sb-access-token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
          document.cookie = 'sb-refresh-token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
          window.location.href = '/';
      } catch (error) {
          console.error('Error logging out:', error);
      }
  };

  const handleDrawerToggle = () => {
      setDrawerOpen(!drawerOpen);
  };

  const drawer = (
      <Box
          onClick={handleDrawerToggle}
          sx={{
              textAlign: 'center',
              backgroundColor: '#1e1e1e',
              paddingTop: 2,
              height: '100%',
          }}
      >
          <Typography variant="h6" sx={{ my: 2, color: '#ffffff' }}>
              YFI BANK
          </Typography>
          <List>
              {navItems.map((item) => (
                  <ListItem
                      key={item.label}
                      component={RouterLink}
                      to={item.to}
                      sx={{
                          textAlign: 'center',
                          color: '#ffffff',
                          '&:hover': {
                              backgroundColor: 'rgba(241, 196, 15, 0.1)',
                          },
                      }}
                  >
                      <ListItemText primary={item.label} />
                  </ListItem>
              ))}
          </List>
      </Box>
  );

  const mobileView = (
      <React.Fragment>
          <IconButton
              edge="end"
              color="inherit"
              aria-label="menu"
              onClick={handleDrawerToggle}
          >
              <MenuIcon />
          </IconButton>
          <Drawer
              anchor="top"
              open={drawerOpen}
              onClose={handleDrawerToggle}
              ModalProps={{
                  keepMounted: true,
              }}
              sx={{
                  '& .MuiDrawer-paper': {
                      width: '100%',
                      backgroundColor: '#1e1e1e',
                      paddingTop: 2,
                  },
              }}
          >
              {drawer}
          </Drawer>
      </React.Fragment>
  );

  const renderAuthButtons = () => {
      if (user) {
          return (
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  <IconButton
                      onClick={handleClick}
                      sx={{ p: 0 }}
                  >
                      <Avatar sx={{ bgcolor: '#f1c40f', color: '#1e1e1e' }}>{user.name?.charAt(0).toUpperCase() || user.email?.charAt(0).toUpperCase()}</Avatar>
                  </IconButton>
                  <Menu
                      id="basic-menu"
                      anchorEl={anchorEl}
                      open={open}
                      onClose={handleClose}
                      MenuListProps={{
                          'aria-labelledby': 'basic-button',
                      }}
                      PaperProps={{
                          style: {
                              backgroundColor: '#1e1e1e',
                              color: '#ffffff',
                          },
                      }}
                  >
                      <MenuItem onClick={handleLogout}>Sair</MenuItem>
                  </Menu>
              </Box>
          );
      }

      return (
          <Box sx={{ display: 'flex', gap: 2 }}>
              <CustomButton
                  component={RouterLink}
                  to="/signup"
                  variant="contained"
                  color="primary"
              >
                  Abrir Conta
              </CustomButton>
              <CustomButton
                  component={RouterLink}
                  to="/login"
                  variant="text"
                  color="primary"
                  sx={{ border: 'none' }}
              >
                  Entrar
              </CustomButton>
          </Box>
      );
  };

  return (
      <AppBar 
          position="fixed" 
          sx={{
              background: 'rgba(30, 30, 30, 0.8)',
              backdropFilter: 'blur(10px)',
              borderBottom: '1px solid rgba(184, 134, 11, 0.1)',
              boxShadow: '0 2px 10px rgba(184, 134, 11, 0.04)'
          }}
      >
          <Toolbar sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              {/* Logo Section */}
              <Box component={RouterLink} to="/" sx={{ display: 'flex', alignItems: 'center', textDecoration: 'none', '&:hover': { color: '#f1c40f' }, color: '#ffffff' }}>
                  <FaBuilding size={30} style={{ marginRight: 8 }} />
                  <Typography
                      variant="h6"
                      sx={{
                          color: '#ffffff',
                      }}
                  >
                      YFI BANK
                  </Typography>
              </Box>

              {/* Navigation Links (Centered) */}
              {!isMobile && (
                  <Box sx={{ display: 'flex', justifyContent: 'center', flexGrow: 1 }}>
                      <Box sx={{ display: 'flex', gap: 3 }}>
                          {navItems.map((item) => (
                              <Button
                                  key={item.label}
                                  component={RouterLink}
                                  to={item.to}
                                  sx={{
                                      color: '#ffffff',
                                      '&:hover': {
                                          color: '#f1c40f',
                                      },
                                  }}
                              >
                                  {item.label}
                              </Button>
                          ))}
                      </Box>
                  </Box>
              )}

              {/* Authentication Buttons */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                  {isMobile ? mobileView : renderAuthButtons()}
              </Box>
          </Toolbar>
      </AppBar>
  );
};

export default Header;

================
File: src/env.d.ts
================
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_SUPABASE_URL: string
  readonly VITE_SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}

================
File: src/hooks/useAuth.ts
================
import { useState, useEffect } from 'react';
import { createClient, User as SupabaseUser } from '@supabase/supabase-js';
import { User } from '../types/common';
import { sanitizeObject } from '../utils/sanitizers';
import { api } from '../services/api';
import { ApiResponse } from '../types/common';

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_ANON_KEY
);

export function useAuth() {
  const [authUser, setAuthUser] = useState<SupabaseUser | null>(null);
  const [userProfile, setUserProfile] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Fetch user profile from Supabase
  const fetchUserProfile = async (supabaseUser: SupabaseUser) => {
    try {
      const { data: profile, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', supabaseUser.id)
        .single();

      if (error) throw error;

      const customUser: User = {
        id: profile.id,
        name: profile.name,
        email: profile.email,
        cpf: profile.cpf,
        phone: profile.phone,
        birthDate: profile.birth_date,
        address: {
          cep: profile.cep,
          street: profile.street,
          number: profile.number,
          complement: profile.complement || undefined,
          neighborhood: profile.neighborhood,
          city: profile.city,
          state: profile.state,
        },
      };

      const sanitizedUser = sanitizeObject(customUser) as User;
      setUserProfile(sanitizedUser);
    } catch (error) {
      console.error('Error fetching profile:', error);
      setUserProfile(null);
    }
  };

  // Handle auth state changes
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        const currentUser = session?.user || null;
        setAuthUser(currentUser);

        if (currentUser) {
          await fetchUserProfile(currentUser);
        } else {
          setUserProfile(null);
        }

        setLoading(false);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Sign up with Supabase
  const signUp = async (email: string, password: string, userData: Partial<User>) => {
    try {
      console.log('Starting signUp function');
      // Sign up with Supabase Auth
      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
      });
  
      if (signUpError) {
        console.error('Supabase signUp error:', signUpError);
        throw signUpError;
      }
  
      console.log('Supabase signUp successful:', signUpData);
  
      // Insert user data into users table
      if (signUpData.user) {
        console.log('Calling backend to insert user data:', {
          id: signUpData.user.id,
          email: signUpData.user.email,
          name: userData.name,
          cpf: userData.cpf,
          phone: userData.phone,
          birthDate: userData.birthDate,
          address: userData.address,
        });
  
        const response = await api.post<ApiResponse>('/auth/insert-user', {
          id: signUpData.user.id,
          email: signUpData.user.email,
          name: userData.name,
          cpf: userData.cpf,
          phone: userData.phone,
          birthDate: userData.birthDate,
          address: userData.address,
        });
  
        if (response.data.error) {
          console.error('Error from backend:', response.data.error);
          throw new Error(response.data.error);
        }
  
        console.log('User data inserted successfully:', response.data);
        return signUpData.user;
      } else {
        console.error('No user data found after signup.');
        throw new Error('No user data found after signup.');
      }
    } catch (error) {
      console.error('Error during signup process:', error);
      throw error;
    }
  };
  
  // Log in with Supabase
  const login = async (email: string, password: string) => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;
      return data;
    } catch (error) {
      throw error;
    }
  };

  // Log out with Supabase
  const logout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      setAuthUser(null);
      setUserProfile(null);
    } catch (error) {
      throw error;
    }
  };

  return {
    user: userProfile,
    authUser,
    loading,
    signUp,
    login,
    logout,
  };
}

================
File: src/index.tsx
================
// src/index.tsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import theme from './theme';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';

const container = document.getElementById('root');
if (!container) {
    throw new Error('Root element not found');
}

const root = createRoot(container);
root.render(
    <React.StrictMode>
        <ThemeProvider theme={theme}>
            <CssBaseline /> {/* Reset CSS e estilos base do MUI */}
            <App />
        </ThemeProvider>
    </React.StrictMode>
);

================
File: src/pages/Contato/components/ContactChannelsSection/ContactChannelsSection.tsx
================
import React from 'react';
import { Box, Container, Grid, Typography, Card, CardContent, useTheme } from '@mui/material';
import EmailIcon from '@mui/icons-material/Email';
import ChatIcon from '@mui/icons-material/Chat';
import HelpIcon from '@mui/icons-material/Help';
import { useNavigate } from 'react-router-dom';
import CustomButton from '../../../../components/common/CustomButton/CustomButton';
import { motion } from 'framer-motion';

interface ContactChannel {
  icon: JSX.Element;
  title: string;
  description: string;
  contact: string;
  action: (() => void) | null;
}

const ContactChannelsSection = () => {
  const theme = useTheme();
  const navigate = useNavigate();

  const channels: ContactChannel[] = [
    {
      icon: <EmailIcon sx={{ fontSize: 48, color: theme.palette.primary.main }} />,
      title: 'E-mail',
      description: 'Entre em contato por e-mail para assuntos relacionados a parcerias empresariais, imprensa e oportunidades de negócio.',
      contact: 'contato@yfibank.com.br',
      action: null
    },
    {
      icon: <ChatIcon sx={{ fontSize: 48, color: theme.palette.primary.main }} />,
      title: 'Chat ao Vivo',
      description: 'Atendimento instantâneo com nossa equipe especializada, disponível de segunda a sexta, das 9h às 18h.',
      contact: 'Iniciar conversa',
      action: () => window.open('https://chat.yfibank.com', '_blank')
    },
    {
      icon: <HelpIcon sx={{ fontSize: 48, color: theme.palette.primary.main }} />,
      title: 'Central de Ajuda',
      description: 'Acesse nossa base de conhecimento com tutoriais, guias e respostas para as dúvidas mais frequentes.',
      contact: 'Acessar central',
      action: () => navigate('/ajuda')
    },
  ];

  return (
    <Box
      component="section"
      sx={{
        backgroundColor: theme.palette.background.default,
        py: 8,
        position: 'relative',
      }}
    >
      <Container maxWidth="lg">
        <Typography
          variant="h2"
          sx={{
            color: theme.palette.primary.main,
            textAlign: 'center',
            mb: 6,
          }}
        >
          Canais de Atendimento
        </Typography>
        <Grid container spacing={4}>
          {channels.map((channel, index) => (
            <Grid item xs={12} md={4} key={index}>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.2 }}
                viewport={{ once: true }}
                style={{ height: '100%' }}
              >
                <Card
                  sx={{
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    backgroundColor: 'rgba(30, 30, 30, 0.6)',
                    backdropFilter: 'blur(10px)',
                    borderRadius: '24px',
                    padding: 3,
                    position: 'relative',
                    overflow: 'hidden',
                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                    '&:hover': {
                      transform: 'translateY(-8px) scale(1.02)',
                      boxShadow: '0 12px 20px rgba(241, 196, 15, 0.1)',
                      border: '1px solid rgba(241, 196, 15, 0.3)',
                    },
                  }}
                >
                  <CardContent sx={{ flexGrow: 1, textAlign: 'center', p: 3 }}>
                    <Box sx={{ mb: 2 }}>
                      <Box
                        component="span"
                        sx={{
                          color: theme.palette.primary.main,
                          fontSize: '2.5rem',
                        }}
                      >
                        {channel.icon}
                      </Box>
                    </Box>
                    <Typography
                      variant="h5"
                      component="h3"
                      gutterBottom
                      sx={{ fontWeight: 'bold', color: theme.palette.secondary.main }}
                    >
                      {channel.title}
                    </Typography>
                    <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                      {channel.description}
                    </Typography>
                    {channel.action ? (
                      <CustomButton
                        onClick={channel.action}
                        variant="contained"
                        fullWidth
                      >
                        {channel.contact}
                      </CustomButton>
                    ) : (
                      <Typography
                        sx={{
                          color: theme.palette.primary.main,
                          fontWeight: 'bold',
                        }}
                      >
                        {channel.contact}
                      </Typography>
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            </Grid>
          ))}
        </Grid>
      </Container>
    </Box>
  );
};

export default ContactChannelsSection;

================
File: src/pages/Contato/components/HeroSection/HeroSection.tsx
================
import React from 'react';
import { Box, Container, Typography, useTheme } from '@mui/material';

interface ContatoHeroSectionProps {
  title?: string;
  subtitle?: string;
}

const HeroSection: React.FC<ContatoHeroSectionProps> = ({
  title = 'Suporte YFI Bank',
  subtitle = 'Nossa equipe está pronta para ajudar você em sua jornada financeira. Escolha o canal de atendimento que melhor atende às suas necessidades.'
}) => {
  const theme = useTheme();

  return (
    <Box
      sx={{
        backgroundColor: theme.palette.background.default,
        py: 12,
        position: 'relative',
        '&::after': {
          content: '""',
          position: 'absolute',
          bottom: 0,
          left: 0,
          right: 0,
          height: '100px',
          background: 'none',
        },
      }}
    >
      <Container maxWidth="lg">
        <Typography
          variant="h1"
          sx={{
            color: theme.palette.primary.main,
            textAlign: 'center',
            mb: 2,
          }}
        >
          {title}
        </Typography>
        <Typography
          variant="h5"
          sx={{
            color: theme.palette.secondary.main,
            textAlign: 'center',
            maxWidth: '800px',
            mx: 'auto',
          }}
        >
          {subtitle}
        </Typography>
      </Container>
    </Box>
  );
};

export default HeroSection;

================
File: src/pages/Contato/index.tsx
================
import React from 'react';
import { Box } from '@mui/material';
import HeroSection from './components/HeroSection/HeroSection';
import ContactChannelsSection from './components/ContactChannelsSection/ContactChannelsSection';
import WhyChooseSection from '../../components/common/WhyChooseSection/WhyChooseSection';
import CTASection from '../../components/common/CTASection/CTASection';

const Contato: React.FC = () => {
  return (
    <Box sx={{ backgroundColor: 'background.default' }}>
      <HeroSection />
      <ContactChannelsSection />
      <WhyChooseSection />
      <CTASection />
    </Box>
  );
};

export default Contato;

================
File: src/pages/Dashboard/components/BTC.tsx
================
import React, { useState } from 'react';
import { Box, Typography, FormControl, InputLabel, Select, MenuItem, TextField, useTheme } from '@mui/material';
import CustomButton from '../../../components/common/CustomButton/CustomButton';
import Chart from '../../../components/common/Chart/Chart';
import Table from '../../../components/common/Table/Table';

interface Order {
  type: string;
  pair: string;
  quantity: string;
  price: string;
  date: string;
}

const BTC = () => {
  const theme = useTheme();
  const [selectedCurrency, setSelectedCurrency] = useState('BRL');
  const [action, setAction] = useState('COMPRAR');

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        BTC (Visão Geral do Dashboard)
      </Typography>
      <Chart
        data={{
          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
          datasets: [
            {
              label: 'BTC-BRL',
              data: [65, 59, 80, 81, 56, 55, 40],
              borderColor: 'primary',
              backgroundColor: 'primary',
            },
          ],
        }}
        title="Visualizar Gráfico BTC-BRL"
      />
      <Box sx={{ mt: 2, '& > button': { mr: 1 } }}>
        <CustomButton variant="contained" color="primary" onClick={() => setAction('COMPRAR')}>
          COMPRAR
        </CustomButton>
        <CustomButton variant="contained" color="primary" onClick={() => setAction('VENDER')}>
          VENDER
        </CustomButton>
        <CustomButton variant="contained" color="primary" onClick={() => setAction('CONVERTER')}>
          CONVERTER
        </CustomButton>
      </Box>
      <Box sx={{ mt: 3 }}>
        <Typography variant="subtitle1">{action} BTC</Typography>
        <FormControl fullWidth sx={{ mt: 1 }}>
          <InputLabel id="currency-select-label">Qual moeda?</InputLabel>
          <Select
            labelId="currency-select-label"
            id="currency-select"
            value={selectedCurrency}
            label="Qual moeda?"
            onChange={(e) => setSelectedCurrency(e.target.value as string)}
          >
            <MenuItem value="BRL">BRL</MenuItem>
            <MenuItem value="USDT">USDT</MenuItem>
          </Select>
        </FormControl>
        <FormControl fullWidth sx={{ mt: 2 }}>
          <TextField
            label={`Valor em ${selectedCurrency}`}
            variant="outlined"
          />
        </FormControl>
        <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between' }}>
          <CustomButton variant="outlined" size="small" color="primary">25%</CustomButton>
          <CustomButton variant="outlined" size="small" color="primary">50%</CustomButton>
          <CustomButton variant="outlined" size="small" color="primary">75%</CustomButton>
          <CustomButton variant="outlined" size="small" color="primary">100%</CustomButton>
        </Box>
        <Typography variant="subtitle2" mt={1}>
          Cotação estimada: {/* Placeholder */}
        </Typography>
        <CustomButton variant="contained" color="primary" fullWidth sx={{ mt: 2 }}>
          {action} BTC
        </CustomButton>
      </Box>
      <Box sx={{ mt: 3 }}>
        <Typography variant="subtitle1">Ordens Executadas BTC</Typography>
        <Table
          columns={[
            { label: 'Tipo', key: 'type' },
            { label: 'Par', key: 'pair' },
            { label: 'Quantidade', key: 'quantity' },
            { label: 'Preço', key: 'price' },
            { label: 'Data', key: 'date' },
          ]}
          data={[
            { type: 'Compra', pair: 'BTC/BRL', quantity: '0.001', price: '150.000', date: 'Hoje' },
            { type: 'Venda', pair: 'BTC/BRL', quantity: '0.002', price: '152.000', date: 'Ontem' },
          ]}
        />
      </Box>
    </Box>
  );
};

export default BTC;

================
File: src/pages/Dashboard/components/DashboardMenu.tsx
================
import React from 'react';
import { Box, List, ListItem, ListItemButton, ListItemIcon, ListItemText } from '@mui/material';
import { Link as RouterLink, useLocation } from 'react-router-dom';
import AccountBalanceIcon from '@mui/icons-material/AccountBalance';
import SwapHorizIcon from '@mui/icons-material/SwapHoriz';
import ReceiptIcon from '@mui/icons-material/Receipt';
import SendIcon from '@mui/icons-material/Send';
import MonetizationOnIcon from '@mui/icons-material/MonetizationOn';


const navItems = [
    { label: 'Visão Geral', to: '/dashboard', icon: <AccountBalanceIcon /> },
    { label: 'Negociar', to: '/dashboard/negociar', icon: <SwapHorizIcon /> },
    { label: 'Extrato', to: '/dashboard/extrato', icon: <ReceiptIcon /> },
    { label: 'Transferências de Reais', to: '/dashboard/transferencias-de-reais', icon: <MonetizationOnIcon /> },
    { label: 'Enviar / Receber Moedas', to: '/dashboard/enviar-receber', icon: <SendIcon /> },
];
const DashboardMenu: React.FC = () => {
    const location = useLocation();

    return (
        <Box sx={{ width: 240, bgcolor: 'background.paper', height: '100%', borderRight: '1px solid rgba(241, 196, 15, 0.1)' }}>
            <List>
                {navItems.map((item) => (
                    <ListItem key={item.label} disablePadding>
                        <ListItemButton
                            component={RouterLink}
                            to={item.to}
                            sx={(theme) => ({
                                '&.Mui-selected': {
                                    backgroundColor: theme.palette.secondary.light,
                                    '& .MuiListItemIcon-root': {
                                        color: theme.palette.secondary.main,
                                    },
                                },
                                '&:hover': {
                                    backgroundColor: theme.palette.secondary.light,
                                },
                            })}
                            selected={location.pathname.startsWith(item.to)}
                        >
                            <ListItemIcon color="inherit">
                                {item.icon}
                            </ListItemIcon>
                            <ListItemText primary={item.label} />
                        </ListItemButton>
                    </ListItem>
                ))}
            </List>
        </Box>
    );
};

export default DashboardMenu;

================
File: src/pages/Dashboard/components/Negociar.tsx
================
import React, { useState, ChangeEvent, useEffect } from 'react';
import { Box, Typography, FormControl, InputLabel, Select, MenuItem, TextField, RadioGroup, FormControlLabel, Radio, Button, SelectChangeEvent } from '@mui/material';
import CustomButton from '../../../components/common/CustomButton/CustomButton';
import Chart from '../../../components/common/Chart/Chart';
import Table from '../../../components/common/Table/Table';
import { api } from '../../../services/api';

const Negociar = () => {
  const [selectedAsset, setSelectedAsset] = useState<string>('BTC');
  const [inputValue, setInputValue] = useState<string>('');
  const [orderType, setOrderType] = useState<'buy' | 'sell'>('buy');
  const [quoteCurrency, setQuoteCurrency] = useState<string>('BRL');
  const [inputCurrencyType, setInputCurrencyType] = useState<'quote' | 'base'>('quote');

  const [marketPrice, setMarketPrice] = useState<number>(0);
  const [loadingPrice, setLoadingPrice] = useState(false);

  useEffect(() => {
    const fetchMarketPrice = async () => {
      setLoadingPrice(true);
      try {
        const response = await api.get(`/market-data/${selectedAsset}/${quoteCurrency}`);
        setMarketPrice(response.data.price); // Assuming the API returns an object with a 'price' property
      } catch (error) {
        console.error('Error fetching market price:', error);
        // Handle error appropriately
      } finally {
        setLoadingPrice(false);
      }
    };

    fetchMarketPrice();
  }, [selectedAsset, quoteCurrency]);

  const handleAssetChange = (event: SelectChangeEvent) => {
    setSelectedAsset(event.target.value as string);
  };

  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {
    setInputValue(event.target.value);
  };

  const handleOrderTypeChange = (event: ChangeEvent<HTMLInputElement>) => {
    setOrderType(event.target.value as 'buy' | 'sell');
  };

  const handleQuoteCurrencyChange = (event: SelectChangeEvent) => {
    setQuoteCurrency(event.target.value as string);
  };

  const handlePercentageClick = (percentage: number) => {
    const value = parseFloat(inputValue || '0') * percentage;
    setInputValue(value.toString());
  };

  const handleInputCurrencyChange = (event: ChangeEvent<HTMLInputElement>) => {
    setInputCurrencyType(event.target.value as 'quote' | 'base');
  };

  const calculateEstimatedQuantity = () => {
    const value = parseFloat(inputValue || '0');
    if (isNaN(value) || marketPrice === 0) {
      return 0;
    }

    if (inputCurrencyType === 'quote') {
      return value / marketPrice;
    } else {
      return value;
    }
  };

  const placeOrder = async () => {
    try {
      const quantity = calculateEstimatedQuantity();
      await api.post('/orders', {
        asset: selectedAsset,
        type: orderType,
        quantity,
        price: marketPrice, // Using current market price for simplicity
        quoteCurrency,
      });
      alert('Order placed successfully!');
      // Optionally refresh order history
    } catch (error) {
      console.error('Error placing order:', error);
      alert('Failed to place order.');
    }
  };

  return (
    <Box>
      <Box>
        <Typography variant="h6" gutterBottom>
          Negociar
        </Typography>
        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2, mt: 2 }}>
          <FormControl fullWidth>
            <InputLabel id="asset-select-label">Selecionar Ativo</InputLabel>
            <Select
              labelId="asset-select-label"
              id="asset-select"
              value={selectedAsset}
              label="Selecionar Ativo"
              onChange={handleAssetChange}
            >
              <MenuItem value="BTC">BTC</MenuItem>
              <MenuItem value="ETH">ETH</MenuItem>
              <MenuItem value="USDT">USDT</MenuItem>
            </Select>
          </FormControl>
          {selectedAsset && (
            <Box>
              <Chart
                data={{
                  labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
                  datasets: [
                    {
                      label: `${selectedAsset} Price`,
                      data: [65, 59, 80, 81, 56, 55, 40],
                      borderColor: 'primary',
                      backgroundColor: 'primary',
                    },
                  ],
                }}
                title={`${selectedAsset}/${quoteCurrency.toUpperCase()}`}
              />
            </Box>
          )}
        </Box>
        <Box sx={{ mt: 3 }}>
          <FormControl component="fieldset">
            <RadioGroup
              row
              aria-label="order type"
              name="order-type"
              value={orderType}
              onChange={handleOrderTypeChange}
            >
              <FormControlLabel value="buy" control={<Radio />} label="Comprar" />
              <FormControlLabel value="sell" control={<Radio />} label="Vender" />
            </RadioGroup>
          </FormControl>

          <FormControl component="fieldset" sx={{ mt: 2 }}>
            <RadioGroup
              row
              aria-label="input currency"
              name="input-currency"
              value={inputCurrencyType}
              onChange={handleInputCurrencyChange}
            >
              <FormControlLabel value="base" control={<Radio />} label={selectedAsset} />
              <FormControlLabel value="quote" control={<Radio />} label={quoteCurrency.toUpperCase()} />
            </RadioGroup>
          </FormControl>

          <FormControl fullWidth sx={{ mt: 1 }}>
            <TextField
              label={`Valor em ${inputCurrencyType === 'quote' ? quoteCurrency.toUpperCase() : selectedAsset}`}
              variant="outlined"
              value={inputValue}
              onChange={handleInputChange}
            />
          </FormControl>
          <Box sx={{ mt: 1, display: 'flex', justifyContent: 'space-between' }}>
            <CustomButton variant="outlined" size="small" onClick={() => handlePercentageClick(0.25)}>25%</CustomButton>
            <CustomButton variant="outlined" size="small" onClick={() => handlePercentageClick(0.50)}>50%</CustomButton>
            <CustomButton variant="outlined" size="small" onClick={() => handlePercentageClick(0.75)}>75%</CustomButton>
            <CustomButton variant="outlined" size="small" onClick={() => handlePercentageClick(1)}>100%</CustomButton>
          </Box>

          <FormControl fullWidth sx={{ mt: 1 }}>
            <InputLabel id="quote-currency-select-label">Moeda de Cotação</InputLabel>
            <Select
              labelId="quote-currency-select-label"
              id="quote-currency-select"
              value={quoteCurrency}
              label="Moeda de Cotação"
              onChange={handleQuoteCurrencyChange}
            >
              <MenuItem value="BRL">BRL</MenuItem>
              <MenuItem value="USDT">USDT</MenuItem>
            </Select>
          </FormControl>

          <Typography variant="subtitle2" mt={1}>
            Preço de mercado: {marketPrice} {quoteCurrency.toUpperCase()}
          </Typography>
        </Box>
        <Box sx={{ mt: 2 }}>
          <TextField
            label="Preço Limite (Opcional)"
            variant="outlined"
            fullWidth
          // value={price}
          // onChange={handlePriceChange}
          />
        </Box>

        <Typography variant="subtitle1" mt={2}>
          Quantidade Estimada: {calculateEstimatedQuantity()} {selectedAsset}
        </Typography>

        <Button
          variant="contained"
          color="primary"
          fullWidth
          sx={{ mt: 2 }}
          onClick={placeOrder}
        >
          {orderType === 'buy' ? 'Comprar' : 'Vender'} {selectedAsset}
        </Button>
      </Box>

      <Box sx={{ mt: 4 }}>
        <Typography variant="h6" gutterBottom>
          Histórico de Ordens
        </Typography>
        <Table
          data={[
            { ativo: 'BTC', tipo: 'Compra', preco: '150,000 BRL', quantidade: '0.001', data: 'Hoje' },
            { ativo: 'ETH', tipo: 'Venda', preco: '10,000 BRL', quantidade: '0.02', data: 'Ontem' },
          ]}
          columns={[
            { key: 'ativo', label: 'Ativo' },
            { key: 'tipo', label: 'Tipo' },
            { key: 'preco', label: 'Preço' },
            { key: 'quantidade', label: 'Quantidade' },
            { key: 'data', label: 'Data' },
          ]}
        />
      </Box>
    </Box>
  );
}
export default Negociar;

================
File: src/pages/Dashboard/index.tsx
================
import React from 'react';
import { Box } from '@mui/material';
import { Routes, Route, Outlet } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import DashboardMenu from './components/DashboardMenu';
import BTC from './components/BTC';
import Negociar from './components/Negociar';

const DashboardLayout: React.FC = () => {
    return (
        <Box sx={{ display: 'flex', minHeight: '100vh', background: 'linear-gradient(45deg, #121212 30%, #1e1e1e 90%)' }}>
            <DashboardMenu />
            <Box sx={{ flexGrow: 1, p: 3 }}>
                <Outlet />
            </Box>
        </Box>
    );
};

const DashboardPage: React.FC = () => {
    const { user } = useAuth();

    if (!user) {
        return null;
    }

    return (
        <Routes>
            <Route path="/" element={<DashboardLayout />}>
                <Route index element={<BTC />} />
                <Route path="negociar" element={<Negociar />} />
            </Route>
        </Routes>
    );
};

export default DashboardPage;

================
File: src/pages/Home/components/CryptoSection/CryptoSection.tsx
================
// src/pages/Home/components/CryptoSection/CryptoSection.tsx
import React, { useEffect, useState } from 'react';
import { Box, Typography, Container, Card, CardMedia, CircularProgress } from '@mui/material';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import { CoinInfo, CryptoData, SliderSettings } from '../../../../types/common';

// Importação dos ícones das criptomoedas
import bitcoinIcon from '../../../../assets/crypto/bitcoin.png';
import ethereumIcon from '../../../../assets/crypto/ethereum.png';
import solanaIcon from '../../../../assets/crypto/solana.png';
import xrpIcon from '../../../../assets/crypto/xrp.png';
import cardanoIcon from '../../../../assets/crypto/cardano.png';
import tronIcon from '../../../../assets/crypto/tron.png';
import avalancheIcon from '../../../../assets/crypto/avalanche.png';
import polkadotIcon from '../../../../assets/crypto/polkadot.png';

const RETRY_DELAY = 2000;

const coinIds: CoinInfo[] = [
    { id: 'bitcoin', name: 'Bitcoin', symbol: 'BTC', icon: bitcoinIcon },
    { id: 'ethereum', name: 'Ethereum', symbol: 'ETH', icon: ethereumIcon },
    { id: 'solana', name: 'Solana', symbol: 'SOL', icon: solanaIcon },
    { id: 'ripple', name: 'XRP', symbol: 'XRP', icon: xrpIcon },
    { id: 'cardano', name: 'Cardano', symbol: 'ADA', icon: cardanoIcon },
    { id: 'tron', name: 'Tron', symbol: 'TRX', icon: tronIcon },
    { id: 'avalanche-2', name: 'Avalanche', symbol: 'AVAX', icon: avalancheIcon },
    { id: 'polkadot', name: 'Polkadot', symbol: 'DOT', icon: polkadotIcon }
];

const fetchWithRetry = async (url: string, retries = 3): Promise<Response> => {
    for (let i = 0; i < retries; i++) {
        try {
            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (response.ok) {
                return response;
            }
            
            if (response.status === 429) {
                await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
                continue;
            }
            
            throw new Error(`HTTP error! status: ${response.status}`);
        } catch (error) {
            if (i === retries - 1) throw error;
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
        }
    }
    throw new Error('Max retries reached');
};

const CryptoSection: React.FC = () => {
    const [cryptoData, setCryptoData] = useState<CryptoData[]>([]);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchCryptoData = async () => {
            try {
                const ids = coinIds.map(coin => coin.id).join(',');
                const response = await fetchWithRetry(
                    `https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd&include_24hr_change=true`
                );
                
                if (!response.ok) {
                    throw new Error('Falha ao carregar dados');
                }
                
                const data = await response.json();
                
                const results = coinIds.map(coin => {
                    const coinData = data[coin.id];
                    if (!coinData) {
                        console.error(`Dados não encontrados para ${coin.name}`);
                        return null;
                    }
                    return {
                        name: coin.name,
                        symbol: coin.symbol,
                        icon: coin.icon,
                        price: coinData.usd.toLocaleString('en-US', { 
                            style: 'currency', 
                            currency: 'USD' 
                        }),
                        variation: coinData.usd_24h_change?.toFixed(2) || '0.00',
                    };
                }).filter((item): item is CryptoData => item !== null);

                setCryptoData(results);
                setLoading(false);
            } catch (err) {
                console.error('Erro ao buscar dados:', err);
                setError('Falha ao carregar os dados das criptomoedas.');
                setLoading(false);
            }
        };

        fetchCryptoData();
        
        const interval = setInterval(fetchCryptoData, 120000);
        return () => clearInterval(interval);
    }, []);

    const settings: SliderSettings = {
        dots: false,
        infinite: true,
        speed: 5000,
        slidesToShow: 4,
        slidesToScroll: 1,
        arrows: false,
        autoplay: true,
        autoplaySpeed: 0,
        cssEase: "linear",
        pauseOnHover: true,
        swipe: false,
        adaptiveHeight: true,
        variableWidth: true,
        waitForAnimate: true,
        responsive: [
            {
                breakpoint: 1280,
                settings: {
                    slidesToShow: 3,
                }
            },
            {
                breakpoint: 960,
                settings: {
                    slidesToShow: 2,
                }
            },
            {
                breakpoint: 600,
                settings: {
                    slidesToShow: 1,
                }
            }
        ]
    };

    return (
        <Box
            component="section"
            sx={{
                backgroundColor: '#121212',
                textAlign: 'center', 
                paddingY: 8,
                marginBottom: { xs: 4, sm: 8 },
                overflow: 'hidden',
            }}
            id="cryptomarket"
        >
            <Container maxWidth={false} sx={{ px: { xs: 0, sm: 2 } }}>
                {loading ? (
                    <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '200px' }}>
                        <CircularProgress />
                    </Box>
                ) : error ? (
                    <Typography color="error">{error}</Typography>
                ) : (
                    <Box sx={{ 
                        mx: -2,
                        '.slick-track': {
                            display: 'flex',
                            alignItems: 'center',
                        },
                        '.slick-slide': {
                            opacity: 0.7,
                            transition: 'opacity 0.3s ease',
                        },
                        '.slick-slide.slick-active': {
                            opacity: 1,
                        }
                    }}>
                        <Slider {...settings}>
                            {[...cryptoData, ...cryptoData].map((crypto, index) => (
                                <Box key={index} padding={2}>
                                    <Card
                                        sx={{
                                            backgroundColor: 'rgba(30, 30, 30, 0.8)',
                                            backdropFilter: 'blur(10px)',
                                            borderRadius: '16px',
                                            height: { xs: '120px', sm: '80px' },
                                            padding: '8px 16px',
                                            boxSizing: 'border-box',
                                            display: 'flex',
                                            alignItems: 'center',
                                            width: { xs: '240px', sm: '270px' },
                                            margin: '0 auto',
                                            transition: 'all 0.3s ease',
                                            '&:hover': {
                                                transform: 'scale(1.05)',
                                                backgroundColor: 'rgba(30, 30, 30, 0.9)',
                                            }
                                        }}
                                    >
                                        <Box sx={{ 
                                            display: 'flex', 
                                            alignItems: 'center', 
                                            width: '100%',
                                            position: 'relative',
                                        }}>
                                            <CardMedia
                                                component="img"
                                                height="40"
                                                width="40"
                                                image={crypto.icon}
                                                alt={crypto.name}
                                                sx={{ 
                                                    objectFit: 'contain',
                                                    flexShrink: 0,
                                                    width: '40px',
                                                    position: 'absolute',
                                                    left: '0px',
                                                }}
                                            />
                                            <Box
                                                sx={{
                                                    display: 'flex',
                                                    flexDirection: 'column',
                                                    alignItems: 'flex-start',
                                                    justifyContent: 'center',
                                                    marginLeft: '50px',
                                                    width: '100%',
                                                }}
                                            >
                                                <Typography
                                                    variant="body1"
                                                    color="secondary.main"
                                                    sx={{ 
                                                        display: 'flex', 
                                                        alignItems: 'center',
                                                        marginLeft: 0
                                                    }}
                                                >
                                                    {crypto.name}
                                                    <Typography 
                                                        variant="caption" 
                                                        sx={{ 
                                                            color: 'grey.500', 
                                                            marginLeft: '4px',
                                                            marginTop: 0
                                                        }}
                                                    >
                                                        {crypto.symbol}
                                                    </Typography>
                                                </Typography>
                                                <Box sx={{ 
                                                    display: 'flex', 
                                                    alignItems: 'center',
                                                    marginTop: '4px'
                                                }}>
                                                    <Typography
                                                        variant="body2"
                                                        color="text.primary"
                                                        sx={{ marginRight: '8px' }}
                                                    >
                                                        {crypto.price}
                                                    </Typography>
                                                    {parseFloat(crypto.variation) >= 0 ? (
                                                        <ArrowUpwardIcon
                                                            sx={{
                                                                color: 'success.main',
                                                                fontSize: '1rem',
                                                                marginRight: '4px',
                                                            }}
                                                        />
                                                    ) : (
                                                        <ArrowDownwardIcon
                                                            sx={{
                                                                color: 'error.main',
                                                                fontSize: '1rem',
                                                                marginRight: '4px',
                                                            }}
                                                        />
                                                    )}
                                                    <Typography
                                                        variant="body2"
                                                        color={parseFloat(crypto.variation) >= 0 ? 'success.main' : 'error.main'}
                                                    >
                                                        {`${crypto.variation}%`}
                                                    </Typography>
                                                </Box>
                                            </Box>
                                        </Box>
                                    </Card>
                                </Box>
                            ))}
                        </Slider>
                    </Box>
                )}
            </Container>
        </Box>
    );
};

export default CryptoSection;

================
File: src/pages/Home/components/FAQSection/FAQSection.tsx
================
// src/pages/Home/components/FAQSection/FAQSection.tsx
import React from 'react';
import { Box, Typography, Container, Grid, Accordion, AccordionSummary, AccordionDetails } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { FAQ } from '../../../../types/common';

const faqData: FAQ[] = [
    {
        question: 'Como abrir uma conta no YFI Bank?',
        answer: 'Você pode abrir uma conta clicando no botão "Abra sua conta" no cabeçalho e seguindo as instruções.',
    },
    {
        question: 'Quais criptomoedas o YFI Bank suporta?',
        answer: 'Atualmente, suportamos Bitcoin, USDT, Ethereum, Solana, XRP, Cardano, Tron, Avalanche e Polkadot.',
    },
    {
        question: 'Como posso entrar em contato com o suporte?',
        answer: 'Você pode entrar em contato clicando no botão "Contato" no cabeçalho.',
    },
];

const FAQSection: React.FC = () => {
    return (
        <Box component="section" sx={{ backgroundColor: '#121212', color: '#ffffff', paddingY: 8 }} id="faq">
            <Container>
                <Typography variant="h2" align="center" gutterBottom color="secondary.main">
                    Perguntas Frequentes
                </Typography>
                <Grid container spacing={2} justifyContent="center">
                    {faqData.map((faq, index) => (
                        <Grid item key={index} xs={12} sm={6} md={4}>
                            <Accordion 
                                sx={{
                                    backgroundColor: 'rgba(30, 30, 30, 0.6)',
                                    backdropFilter: 'blur(10px)',
                                    borderRadius: '16px !important',
                                    mb: 2,
                                    border: '1px solid rgba(241, 196, 15, 0.1)',
                                    '&:before': {
                                        display: 'none',
                                    },
                                    '&.Mui-expanded': {
                                        border: '1px solid rgba(241, 196, 15, 0.3)',
                                        margin: '0 0 16px 0',
                                    }
                                }}
                            >
                                <AccordionSummary
                                    expandIcon={<ExpandMoreIcon sx={{ color: '#f1c40f' }} />}
                                    sx={{
                                        '& .MuiAccordionSummary-content': {
                                            transition: 'all 0.3s ease',
                                        },
                                        '&.Mui-expanded': {
                                            '& .MuiAccordionSummary-content': {
                                                color: '#f1c40f',
                                            }
                                        }
                                    }}
                                >
                                    <Typography>{faq.question}</Typography>
                                </AccordionSummary>
                                <AccordionDetails>
                                    <Typography>
                                        {faq.answer}
                                    </Typography>
                                </AccordionDetails>
                            </Accordion>
                        </Grid>
                    ))}
                </Grid>
            </Container>
        </Box>
    );
};

export default FAQSection;

================
File: src/pages/Home/components/FeaturesSection/FeaturesSection.tsx
================
import React from 'react';
import { Box, Typography, Container, Grid, Card, CardContent } from '@mui/material';
import PaymentIcon from '@mui/icons-material/Payment';
import AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet';
import CreditCardIcon from '@mui/icons-material/CreditCard';
import BusinessCenterIcon from '@mui/icons-material/BusinessCenter';
import { Feature } from '../../../../types/common';

const features: Feature[] = [
    {
        icon: <PaymentIcon fontSize="large" color="primary" />,
        title: 'Transações via PIX',
        description: 'Realize PIX In e PIX Out de forma rápida e segura, com agendamento de transações.',
    },
    {
        icon: <AccountBalanceWalletIcon fontSize="large" color="primary" />,
        title: 'Gerenciamento de Criptomoedas',
        description: 'Compre, venda e gerencie suas criptomoedas com nossa carteira segura e análise de mercado integrada.',
    },
    {
        icon: <BusinessCenterIcon fontSize="large" color="primary" />,
        title: 'Conta Corporativa',
        description: 'Abertura de conta digital para empresas, com funcionalidades como emissão de boletos, pagamentos de contas, transferências internacionais e gestão de múltiplas moedas.',
    },
    {
        icon: <CreditCardIcon fontSize="large" color="primary" />,
        title: 'Cartões Inteligentes',
        description: 'Controle seus gastos, bloqueie instantaneamente e personalize seus cartões com facilidade.',
    },
];

const FeaturesSection: React.FC = () => {
    return (
        <Box
            component="section"
            sx={{
                backgroundColor: '#121212',
                color: '#ffffff',
                paddingY: 8,
                marginTop: { xs: 4, sm: 8 },
            }}
        >
            <Container>
                <Typography variant="h2" align="center" gutterBottom>
                    Nossas Funcionalidades
                </Typography>
                <Grid container spacing={4} justifyContent="center">
                    {features.map((feature, index) => (
                        <Grid item key={index} xs={12} sm={6} md={3}>
                            <Card 
                                sx={{
                                    backgroundColor: 'rgba(30, 30, 30, 0.6)',
                                    backdropFilter: 'blur(10px)',
                                    padding: 3,
                                    height: '100%',
                                    borderRadius: '24px',
                                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                                    border: '1px solid rgba(241, 196, 15, 0.1)',
                                    '&:hover': {
                                        transform: 'translateY(-8px) scale(1.02)',
                                        boxShadow: '0 12px 20px rgba(241, 196, 15, 0.1)',
                                        border: '1px solid rgba(241, 196, 15, 0.3)',
                                        '& .feature-icon': {
                                            color: '#f1c40f',
                                        }
                                    },
                                }}
                            >
                                <CardContent sx={{ 
                                    display: 'flex', 
                                    flexDirection: 'column',
                                    alignItems: 'center',
                                    textAlign: 'center'
                                }}>
                                    <Box className="feature-icon" sx={{ transition: 'all 0.3s ease' }}>
                                        {feature.icon}
                                    </Box>
                                    <Typography variant="h5" gutterBottom sx={{ marginTop: 2, color: 'secondary.main' }}>
                                        {feature.title}
                                    </Typography>
                                    <Typography variant="body1" sx={{ color: '#f1c40f' }}>{feature.description}</Typography>
                                </CardContent>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            </Container>
        </Box>
    );
};

export default FeaturesSection;

================
File: src/pages/Home/components/HeroSection/HeroSection.tsx
================
import React from 'react';
import { Box, Typography, Container, Grid, Card, CardMedia } from '@mui/material';
import heroImage from '../../../../assets/hero.jpg';
import { motion, Variants } from 'framer-motion';
import CustomButton from '../../../../components/common/CustomButton/CustomButton';
import { Link as RouterLink } from 'react-router-dom';

const HeroSection: React.FC = () => {
    const fadeInUp: Variants = {
        hidden: { 
            opacity: 0,
            y: 40
        },
        visible: { 
            opacity: 1,
            y: 0,
            transition: {
                duration: 0.8,
                ease: "easeOut"
            }
        }
    };

    const staggerContainer: Variants = {
        visible: {
            transition: {
                delayChildren: 0.3,
                staggerChildren: 0.3
            }
        }
    };

    return (
        <Box
            component="section"
            sx={{
                minHeight: '100vh',
                backgroundColor: '#121212',
                color: '#ffffff',
                paddingTop: '60px',
                display: 'flex',
                alignItems: 'center',
            }}
            id="home"
        >
            <Container>
                <Grid container spacing={4} alignItems="center">
                    <Grid item xs={12} md={6}>
                        <motion.div
                            variants={staggerContainer}
                            initial="hidden"
                            animate="visible"
                        >
                            <motion.div variants={fadeInUp}>
                                <Typography 
                                    variant="h1" 
                                    gutterBottom 
                                    sx={{ 
                                        fontWeight: 'bold',
                                        marginBottom: 3,
                                        fontSize: { xs: '2.5rem', md: '3.5rem' }
                                    }}
                                >
                                    Seu parceiro no futuro financeiro.
                                </Typography>
                            </motion.div>
                            <motion.div variants={fadeInUp}>
                                <Typography 
                                    variant="h5" 
                                    gutterBottom 
                                    color="text.secondary"
                                    sx={{ 
                                        marginBottom: 4,
                                        fontSize: { xs: '1.2rem', md: '1.5rem' }
                                    }}
                                >
                                    Soluções digitais para gerenciar PIX, criptomoedas e cartões, com segurança e transparência.
                                </Typography>
                            </motion.div>
                            <motion.div variants={fadeInUp}>
                                <CustomButton 
                                    variant="contained" 
                                    component={RouterLink} 
                                    to="/signup"
                                    sx={{
                                        fontSize: { xs: '0.9rem', md: '0.9rem' },
                                        padding: '15px 30px'
                                    }}
                                >
                                    Abra sua conta
                                </CustomButton>
                            </motion.div>
                        </motion.div>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <motion.div
                            initial={{ opacity: 0, scale: 0.9 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ duration: 0.5, delay: 0.6 }}
                        >
                            <Card sx={{ maxWidth: '100%', margin: '0 auto', backgroundColor: '#1e1e1e', borderRadius: '12px' }}>
                                <CardMedia
                                    component="img"
                                    height="500"
                                    image={heroImage}
                                    alt="Ilustração de serviços bancários digitais"
                                    sx={{ objectFit: 'cover', borderRadius: '12px' }}
                                />
                            </Card>
                        </motion.div>
                    </Grid>
                </Grid>
            </Container>
        </Box>
    );
};

export default HeroSection;

================
File: src/pages/Home/components/SecuritySection/SecuritySection.tsx
================
// src/pages/Home/components/SecuritySection/SecuritySection.tsx
import React from 'react';
import { Box, Typography, Container, Grid, Card, CardContent } from '@mui/material';
import LockIcon from '@mui/icons-material/Lock';
import SecurityIcon from '@mui/icons-material/Security';
import VerifiedUserIcon from '@mui/icons-material/VerifiedUser';
import { SecurityFeature } from '../../../../types/common';

const securityFeatures: SecurityFeature[] = [
    {
        icon: <LockIcon fontSize="large" color="primary" />,
        title: 'Segurança Avançada',
        description: 'Implementamos protocolos de segurança de ponta para proteger seus dados e ativos digitais.',
    },
    {
        icon: <SecurityIcon fontSize="large" color="primary" />,
        title: 'Autenticação em Dois Fatores',
        description: 'Adicione uma camada extra de proteção com a autenticação em dois fatores.',
    },
    {
        icon: <VerifiedUserIcon fontSize="large" color="primary" />,
        title: 'Compliance Rigoroso',
        description: 'Estamos em conformidade com todas as regulamentações financeiras para garantir transparência.',
    },
];

const SecuritySection: React.FC = () => {
    return (
        <Box component="section" sx={{ backgroundColor: '#1e1e1e', color: '#ffffff', paddingY: 8 }}>
            <Container>
                <Typography variant="h2" align="center" gutterBottom color="secondary.main">
                    Segurança e Confiabilidade
                </Typography>
                <Grid container spacing={4} justifyContent="center">
                    {securityFeatures.map((feature, index) => (
                        <Grid item key={index} xs={12} sm={6} md={4}>
                            <Card
                                sx={{
                                    backgroundColor: 'rgba(30, 30, 30, 0.6)',
                                    backdropFilter: 'blur(10px)',
                                    borderRadius: '24px',
                                    padding: 3,
                                    height: '100%',
                                    position: 'relative',
                                    overflow: 'hidden',
                                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                                    '&:hover': {
                                        transform: 'translateY(-8px) scale(1.02)',
                                        boxShadow: '0 12px 20px rgba(241, 196, 15, 0.1)',
                                        border: '1px solid rgba(241, 196, 15, 0.3)',
                                        '& .feature-icon': {
                                            color: '#f1c40f',
                                        }
                                    },
                                }}
                            >
                                <CardContent sx={{ 
                                    display: 'flex', 
                                    flexDirection: 'column',
                                    alignItems: 'center',
                                    textAlign: 'center'
                                }}>
                                    {feature.icon}
                                    <Typography variant="h5" gutterBottom sx={{ marginTop: 2, color: 'secondary.main' }}>
                                        {feature.title}
                                    </Typography>
                                    <Typography variant="body1" sx={{ color: '#f1c40f' }}>
                                        {feature.description}
                                    </Typography>
                                </CardContent>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
            </Container>
        </Box>
    );
};

export default SecuritySection;

================
File: src/pages/Home/components/SignupSection/SignupSection.tsx
================
import React from 'react';
import { Box, Typography, Container, Grid, Card, CardContent } from '@mui/material';
import PersonIcon from '@mui/icons-material/Person';
import CreditCardIcon from '@mui/icons-material/CreditCard';
import { Link as RouterLink } from 'react-router-dom'; 
import CustomButton from '../../../../components/common/CustomButton/CustomButton';
import { SignupStep } from '../../../../types/common';

const SignupSection: React.FC = () => {
    const steps: SignupStep[] = [
        {
            number: '01',
            title: 'Clique no botão "Abra sua conta"',
            description: 'Clique no botão abaixo para iniciar seu cadastro no YFI Bank.',
            icon: <PersonIcon sx={{ fontSize: 60, color: '#f1c40f' }} />,
        },
        {
            number: '02',
            title: 'Complete seu registro rapidamente e confirme sua conta',
            description: 'Preencha seus dados pessoais e complete a validação para começar a usar o YFI Bank.',
            icon: <PersonIcon sx={{ fontSize: 60, color: '#f1c40f' }} />,
        },
        {
            number: '03',
            title: 'Solicite seu cartão para começar a receber cashback em Bitcoin',
            description: 'Solicite seu cartão inteligente e aproveite benefícios exclusivos.',
            icon: <CreditCardIcon sx={{ fontSize: 60, color: '#f1c40f' }} />,
        },
    ];

    return (
        <Box component="section" sx={{ backgroundColor: '#121212', color: '#ffffff', paddingY: 8 }} id="signup">
            <Container>
                <Typography variant="h2" align="center" gutterBottom>
                    Abra sua conta YFI Bank e solicite seu cartão em três passos simples
                </Typography>
                <Grid container spacing={4} justifyContent="center" sx={{ marginTop: 4 }}>
                    {steps.map((step, index) => (
                        <Grid item xs={12} md={4} key={index}>
                            <Card
                                sx={{
                                    backgroundColor: 'rgba(30, 30, 30, 0.6)',
                                    backdropFilter: 'blur(10px)',
                                    borderRadius: '24px',
                                    padding: 3,
                                    height: '100%',
                                    position: 'relative',
                                    overflow: 'hidden',
                                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                                    '&:hover': {
                                        transform: 'translateY(-8px) scale(1.02)',
                                        boxShadow: '0 12px 20px rgba(241, 196, 15, 0.1)',
                                        border: '1px solid rgba(241, 196, 15, 0.3)',
                                        '& .feature-icon': {
                                            color: '#f1c40f',
                                        }
                                    },
                                }}
                            >
                                <CardContent>
                                    <Typography variant="h3" sx={{ 
                                        position: 'absolute', 
                                        top: 16, 
                                        right: 16, 
                                        opacity: 0.2,
                                        fontSize: '3rem',
                                        fontWeight: 'bold',
                                        color: '#f1c40f'
                                    }}>
                                        {step.number}
                                    </Typography>
                                    <Box sx={{ 
                                        display: 'flex', 
                                        flexDirection: 'column',
                                        alignItems: 'center',
                                        textAlign: 'center',
                                        pt: 2
                                    }}>
                                        {step.icon}
                                        <Typography variant="h6" gutterBottom sx={{ marginTop: 2, fontWeight: 'bold' }}>
                                            {step.title}
                                        </Typography>
                                        <Typography variant="body1" sx={{ color: '#f1c40f' }}>
                                            {step.description}
                                        </Typography>
                                    </Box>
                                </CardContent>
                            </Card>
                        </Grid>
                    ))}
                </Grid>
                <Box display="flex" justifyContent="center" sx={{ marginTop: 4 }}>
                    <CustomButton 
                        variant="contained" 
                        component={RouterLink} 
                        to="/signup"
                        sx={{
                            fontSize: '1rem',
                            padding: '14px 28px',
                        }}
                    >
                        Abra sua conta
                    </CustomButton>
                </Box>
            </Container>
        </Box>
    );
};

export default SignupSection;

================
File: src/pages/Home/index.tsx
================
import React from 'react';
import HeroSection from './components/HeroSection/HeroSection';
import CryptoSection from './components/CryptoSection/CryptoSection';
import FeaturesSection from './components/FeaturesSection/FeaturesSection';
import SecuritySection from './components/SecuritySection/SecuritySection';
import SignupSection from './components/SignupSection/SignupSection';
import FAQSection from './components/FAQSection/FAQSection';

const HomePage: React.FC = () => {
    return (
        <>
            <HeroSection />
            <CryptoSection />
            <FeaturesSection />
            <SecuritySection />
            <SignupSection />
            <FAQSection />
        </>
    );
};

export default HomePage;

================
File: src/pages/Login/components/LoginForm/LoginForm.tsx
================
import React from 'react';
import { TextField, Box, Alert, Typography, CircularProgress } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { LoginFormData, ValidationError } from '../../../../types/common';
import CustomButton from '../../../../components/common/CustomButton/CustomButton';

interface LoginFormProps {
    formValues: LoginFormData;
    errors: ValidationError[];
    error?: string;
    isLoading?: boolean;
    onSubmit: (e: React.FormEvent) => Promise<void>;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onForgotPassword: () => void;
}

const LoginForm: React.FC<LoginFormProps> = ({
    formValues,
    errors,
    error,
    isLoading = false,
    onSubmit,
    onChange,
    onForgotPassword
}) => {
    const navigate = useNavigate();
    const emailError = errors.find(error => error.field === 'email')?.message;
    const passwordError = errors.find(error => error.field === 'password')?.message;

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        console.log('Form submit prevented');
        await onSubmit(e);
    };

    return (
        <form 
            onSubmit={handleSubmit}
            style={{ display: 'flex', flexDirection: 'column', gap: '24px' }}
            noValidate
        >
            {error && (
                <Alert 
                    severity="error"
                    sx={{
                        backgroundColor: 'rgba(211, 47, 47, 0.1)',
                        color: '#ff5252',
                        '& .MuiAlert-icon': {
                            color: '#ff5252'
                        }
                    }}
                >
                    {error}
                </Alert>
            )}

            <TextField
                fullWidth
                label="Email"
                name="email"
                type="email"
                value={formValues.email}
                onChange={onChange}
                error={!!emailError}
                helperText={emailError}
                placeholder="seu.email@exemplo.com"
                required
                disabled={isLoading}
                sx={{
                    '& .MuiOutlinedInput-root': {
                        '& fieldset': {
                            borderColor: 'rgba(241, 196, 15, 0.3)',
                        },
                        '&:hover fieldset': {
                            borderColor: 'rgba(241, 196, 15, 0.5)',
                        },
                        '&.Mui-focused fieldset': {
                            borderColor: '#f1c40f',
                        },
                    },
                    '& .MuiInputLabel-root': {
                        color: 'rgba(255, 255, 255, 0.7)',
                        '&.Mui-focused': {
                            color: '#f1c40f',
                        },
                    },
                    '& .MuiOutlinedInput-input': {
                        color: 'white',
                    },
                    '& .MuiFormHelperText-root': {
                        color: 'rgba(255, 255, 255, 0.7)',
                        '&.Mui-error': {
                            color: '#ff5252',
                        },
                    },
                }}
            />

            <Box sx={{ width: '100%' }}>
                <TextField
                    fullWidth
                    label="Senha"
                    name="password"
                    type="password"
                    value={formValues.password}
                    onChange={onChange}
                    error={!!passwordError}
                    helperText={passwordError}
                    required
                    disabled={isLoading}
                    sx={{
                        '& .MuiOutlinedInput-root': {
                            '& fieldset': {
                                borderColor: 'rgba(241, 196, 15, 0.3)',
                            },
                            '&:hover fieldset': {
                                borderColor: 'rgba(241, 196, 15, 0.5)',
                            },
                            '&.Mui-focused fieldset': {
                                borderColor: '#f1c40f',
                            },
                        },
                        '& .MuiInputLabel-root': {
                            color: 'rgba(255, 255, 255, 0.7)',
                            '&.Mui-focused': {
                                color: '#f1c40f',
                            },
                        },
                        '& .MuiOutlinedInput-input': {
                            color: 'white',
                        },
                        '& .MuiFormHelperText-root': {
                            color: 'rgba(255, 255, 255, 0.7)',
                            '&.Mui-error': {
                                color: '#ff5252',
                            },
                        },
                    }}
                />
                <Typography
                    onClick={onForgotPassword}
                    sx={{
                        color: '#f1c40f',
                        cursor: 'pointer',
                        fontSize: '0.875rem',
                        mt: 1,
                        textAlign: 'right',
                        '&:hover': {
                            textDecoration: 'underline'
                        }
                    }}
                >
                    Esqueci minha senha
                </Typography>
            </Box>

            <CustomButton
                type="submit"
                fullWidth
                variant="contained"
                size="large"
                disabled={isLoading}
                sx={{ mt: 2 }}
            >
                {isLoading ? <CircularProgress size={24} color="inherit" /> : 'Entrar'}
            </CustomButton>

            <Box sx={{ textAlign: 'center', mt: 0.725 }}>
                <Typography 
                    sx={{ 
                        color: '#f1c40f',
                        cursor: 'pointer',
                        '&:hover': {
                            textDecoration: 'underline'
                        }
                    }}
                    onClick={() => navigate('/signup')}
                >
                    Não tem uma conta? Cadastre-se
                </Typography>
            </Box>
        </form>
    );
};

export default LoginForm;

================
File: src/pages/Login/index.tsx
================
import React, { useState } from 'react';
import {
    Box,
    Container,
    Card,
    CardContent,
    Typography,
    Fade,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { LoginFormData, ValidationError } from '../../types/common';
import LoginForm from './components/LoginForm/LoginForm';
import { createClient } from '@supabase/supabase-js';
import { sanitizeString } from '../../utils/sanitizers';

const supabase = createClient(
    import.meta.env.VITE_SUPABASE_URL,
    import.meta.env.VITE_SUPABASE_ANON_KEY
);

const LoginPage: React.FC = () => {
    const navigate = useNavigate();
    const [formValues, setFormValues] = useState<LoginFormData>({
        email: '',
        password: ''
    });
    const [error, setError] = useState<string>('');
    const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);
    const [isLoading, setIsLoading] = useState<boolean>(false);

    const handleForgotPassword = () => {
        navigate('/forgot-password');
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
        const { name, value } = e.target;
        setFormValues(prev => ({
            ...prev,
            [name]: sanitizeString(value)
        }));
    };

    const validateEmail = (email: string): boolean => {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    };

    const handleSubmit = async (e: React.FormEvent): Promise<void> => {
        const errors: ValidationError[] = [];

        const sanitizedEmail = sanitizeString(formValues.email);
        const sanitizedPassword = formValues.password; // Não sanitizamos senha

        if (!sanitizedEmail) {
            errors.push({
                field: 'email',
                message: 'Por favor, informe seu email.'
            });
        } else if (!validateEmail(sanitizedEmail)) {
            errors.push({
                field: 'email',
                message: 'Por favor, informe um email válido.'
            });
        }

        if (!sanitizedPassword) {
            errors.push({
                field: 'password',
                message: 'Por favor, informe sua senha.'
            });
        }

        if (errors.length > 0) {
            setValidationErrors(errors);
            return;
        }

        setIsLoading(true);
        setError('');
        setValidationErrors([]);

        try {
            const { data, error: authError } = await supabase.auth.signInWithPassword({
                email: sanitizedEmail,
                password: sanitizedPassword
            });

            if (authError) throw authError;

            if (data.session) {
                navigate('/dashboard', { replace: true });
                return;
            }

            setError('Erro ao processar login. Por favor, tente novamente.');
        } catch (error: any) {
            console.error('Erro no login:', error);
            const errorMessage = error.message || 'Erro ao fazer login. Por favor, tente novamente.';
            setError(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <Box
            sx={{
                minHeight: '100vh',
                background: 'linear-gradient(45deg, #121212 30%, #1e1e1e 90%)',
                display: 'flex',
                alignItems: 'center',
                py: 4,
            }}
        >
            <Container maxWidth="sm">
                <Fade in timeout={800}>
                    <Card
                        elevation={24}
                        sx={{
                            borderRadius: 4,
                            background: 'rgba(30, 30, 30, 0.95)',
                            backdropFilter: 'blur(10px)',
                            border: '1px solid rgba(241, 196, 15, 0.1)',
                        }}
                    >
                        <CardContent sx={{ p: 4 }}>
                            <Box sx={{ mb: 4, textAlign: 'center' }}>
                                <Typography
                                    variant="h4"
                                    sx={{
                                        color: 'white',
                                        fontWeight: 700,
                                        mb: 1
                                    }}
                                >
                                    Login
                                </Typography>
                            </Box>

                            <LoginForm
                                formValues={formValues}
                                errors={validationErrors}
                                error={error}
                                isLoading={isLoading}
                                onSubmit={handleSubmit}
                                onChange={handleChange}
                                onForgotPassword={handleForgotPassword}
                            />
                        </CardContent>
                    </Card>
                </Fade>
            </Container>
        </Box>
    );
};

export default LoginPage;

================
File: src/pages/Profile/index.tsx
================
import React from 'react';
import { Box, Container, Typography, Paper, Grid } from '@mui/material';
import { useAuth } from '../../hooks/useAuth';

const ProfilePage: React.FC = () => {
    const { user } = useAuth();

    if (!user) {
        return null;
    }

    return (
        <Box sx={{ 
            minHeight: '100vh',
            background: 'linear-gradient(45deg, #121212 30%, #1e1e1e 90%)',
            py: 4 
        }}>
            <Container>
                <Paper sx={{ 
                    p: 4,
                    background: 'rgba(30, 30, 30, 0.95)',
                    backdropFilter: 'blur(10px)',
                    border: '1px solid rgba(241, 196, 15, 0.1)',
                    borderRadius: 4
                }}>
                    <Typography variant="h4" component="h1" gutterBottom color="primary">
                        Perfil
                    </Typography>

                    <Grid container spacing={3}>
                        <Grid item xs={12}>
                            <Typography variant="h6" color="primary">Dados Pessoais</Typography>
                            <Box sx={{ mt: 2 }}>
                                <Typography color="white">Nome: {user.name}</Typography>
                                <Typography color="white">Email: {user.email}</Typography>
                                <Typography color="white">CPF: {user.cpf}</Typography>
                                <Typography color="white">Telefone: {user.phone}</Typography>
                                <Typography color="white">Data de Nascimento: {new Date(user.birthDate).toLocaleDateString()}</Typography>
                            </Box>
                        </Grid>

                        <Grid item xs={12}>
                            <Typography variant="h6" color="primary" sx={{ mt: 2 }}>Endereço</Typography>
                            <Box sx={{ mt: 2 }}>
                                <Typography color="white">CEP: {user.cep}</Typography>
                                <Typography color="white">
                                    {user.street}, {user.number}
                                    {user.complement && ` - ${user.complement}`}
                                </Typography>
                                <Typography color="white">{user.neighborhood}</Typography>
                                <Typography color="white">{user.city} - {user.state}</Typography>
                            </Box>
                        </Grid>
                    </Grid>
                </Paper>
            </Container>
        </Box>
    );
};

export default ProfilePage;

================
File: src/pages/Servicos/components/HeroSection/HeroSection.tsx
================
import React from 'react';
import { Box, Container, Typography } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { motion } from 'framer-motion';

const HeroSection: React.FC = () => {
  const theme = useTheme();

  return (
    <Box
      component="section"
      sx={{
        background: `linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('/images/blockchain-pattern.png')`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        py: { xs: 8, md: 12 },
        position: 'relative',
        overflow: 'hidden',
      }}
    >
      <Container maxWidth="lg">
        <Box
          sx={{
            textAlign: 'center',
            position: 'relative',
            zIndex: 2,
          }}
        >
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <Typography
              variant="h1"
              component="h1"
              sx={{
                mb: 3,
                color: theme.palette.primary.main,
                fontWeight: 'bold',
              }}
            >
              Conheça Soluções Financeiras Premium
            </Typography>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
          >
            <Typography
              variant="h5"
              color="secondary"
              sx={{
                maxWidth: '800px',
                mx: 'auto',
                lineHeight: 1.6,
              }}
            >
              Serviços feitos para capacitar seu negócio com eficiência, segurança e inovação.
            </Typography>
          </motion.div>
        </Box>
      </Container>
    </Box>
  );
};

export default HeroSection;

================
File: src/pages/Servicos/components/ServicesSection/ServicesSection.tsx
================
import React from 'react';
import { Box, Container, Grid, Typography, Card, CardContent } from '@mui/material';
import { useTheme } from '@mui/material/styles';
import { motion } from 'framer-motion';
import { FaGlobeAmericas, FaWallet, FaBriefcase, FaBolt, FaCreditCard, FaShieldAlt } from 'react-icons/fa';
import { Service } from '../../../../types/common';

const services: Service[] = [
  {
    icon: <FaGlobeAmericas />,
    title: "Transações Internacionais Simplificadas",
    description: "Transfira fundos internacionalmente com taxas reduzidas e processamento mais rápido. O YFI Bank utiliza tecnologia blockchain para reduzir custos em até 40% comparado aos bancos tradicionais."
  },
  {
    icon: <FaWallet />,
    title: "Gestão de Ativos Digitais",
    description: "Gerencie múltiplas moedas, incluindo criptomoedas como BTC e USDT, em uma única plataforma segura. Nossas soluções avançadas permitem controle total de ativos digitais."
  },
  {
    icon: <FaBriefcase />,
    title: "Conta Digital Corporativa",
    description: "Abra uma conta digital empresarial e gerencie pagamentos, transferências e folha de pagamento de forma segura e simplificada. Operações disponíveis 24/7."
  },
  {
    icon: <FaBolt />,
    title: "PIX e Pagamentos na Conta Digital",
    description: "Realize pagamentos instantâneos com PIX, diretamente da sua conta digital. Gerencie transferências e pagamentos com rapidez e segurança."
  },
  {
    icon: <FaCreditCard />,
    title: "Cartões Inteligentes",
    description: "Controle os gastos da sua empresa com nossos cartões inteligentes. Personalize, bloqueie ou desbloqueie cartões instantaneamente."
  },
  {
    icon: <FaShieldAlt />,
    title: "Segurança Baseada em Blockchain",
    description: "Todas as transações são protegidas por nossa infraestrutura blockchain, garantindo transparência e reduzindo riscos de fraude."
  }
];

const ServicesSection: React.FC = () => {
  const theme = useTheme();

  return (
    <Box
      component="section"
      sx={{
        backgroundColor: theme.palette.background.default,
        py: 8
      }}
    >
      <Container maxWidth="lg">
        <Grid container spacing={4}>
          {services.map((service, index) => (
            <Grid item xs={12} md={4} key={index}>
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.2 }}
                viewport={{ once: true }}
                style={{ height: '100%' }}
              >
                <Card
                  sx={{
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    backgroundColor: 'rgba(30, 30, 30, 0.6)',
                    backdropFilter: 'blur(10px)',
                    borderRadius: '24px',
                    padding: 3,
                    position: 'relative',
                    overflow: 'hidden',
                    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                    '&:hover': {
                      transform: 'translateY(-8px) scale(1.02)',
                      boxShadow: '0 12px 20px rgba(241, 196, 15, 0.1)',
                      border: '1px solid rgba(241, 196, 15, 0.3)',
                    },
                  }}
                >
                  <CardContent sx={{ flexGrow: 1, textAlign: 'center', p: 3 }}>
                    <Box sx={{ mb: 2 }}>
                      <Box
                        component="span"
                        sx={{
                          color: theme.palette.primary.main,
                          fontSize: '2.5rem',
                        }}
                      >
                        {service.icon}
                      </Box>
                    </Box>
                    <Typography
                      variant="h5"
                      component="h3"
                      gutterBottom
                      sx={{ fontWeight: 'bold', color: theme.palette.secondary.main }}
                    >
                      {service.title}
                    </Typography>
                    <Typography variant="body1" color="text.secondary">
                      {service.description}
                    </Typography>
                  </CardContent>
                </Card>
              </motion.div>
            </Grid>
          ))}
        </Grid>
      </Container>
    </Box>
  );
};

export default ServicesSection;

================
File: src/pages/Servicos/index.tsx
================
import React from 'react';
import { Box } from '@mui/material';
import HeroSection from './components/HeroSection/HeroSection';
import ServicesSection from './components/ServicesSection/ServicesSection';
import WhyChooseSection from '../../components/common/WhyChooseSection/WhyChooseSection';
import CTASection from '../../components/common/CTASection/CTASection';

const Servicos: React.FC = () => {
  return (
    <Box component="main">
      <HeroSection />
      <ServicesSection />
      <WhyChooseSection />
      <CTASection />
    </Box>
  );
};

export default Servicos;

================
File: src/pages/Signup/components/AddressStep/AddressStep.tsx
================
import React from 'react';
import { TextField, Box, Alert, Grid } from '@mui/material';
import { SignupFormData, ValidationError } from '../../../../types/common';

interface AddressStepProps {
    formValues: SignupFormData;
    errors: ValidationError[];
    success?: string;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

const AddressStep: React.FC<AddressStepProps> = ({ formValues, errors, success, handleChange }) => {
    const streetError = errors.find(error => error.field === 'street')?.message;
    const numberError = errors.find(error => error.field === 'number')?.message;
    const neighborhoodError = errors.find(error => error.field === 'neighborhood')?.message;
    const cityError = errors.find(error => error.field === 'city')?.message;
    const stateError = errors.find(error => error.field === 'state')?.message;

    return (
        <Box>
            {errors.length > 0 && <Alert severity="error" sx={{ mb: 2 }}>{errors[0].message}</Alert>}
            {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}
            <Grid container spacing={2}>
                <Grid item xs={12}>
                    <TextField
                        fullWidth
                        label="Endereço"
                        name="street"
                        value={formValues.street}
                        onChange={handleChange}
                        error={!!streetError}
                        helperText={streetError}
                        required
                    />
                </Grid>
                <Grid item xs={12} sm={4}>
                    <TextField
                        fullWidth
                        label="Número"
                        name="number"
                        value={formValues.number}
                        onChange={handleChange}
                        error={!!numberError}
                        helperText={numberError}
                        required
                    />
                </Grid>
                <Grid item xs={12} sm={8}>
                    <TextField
                        fullWidth
                        label="Complemento"
                        name="complement"
                        value={formValues.complement}
                        onChange={handleChange}
                    />
                </Grid>
                <Grid item xs={12}>
                    <TextField
                        fullWidth
                        label="Bairro"
                        name="neighborhood"
                        value={formValues.neighborhood}
                        onChange={handleChange}
                        error={!!neighborhoodError}
                        helperText={neighborhoodError}
                        required
                    />
                </Grid>
                <Grid item xs={12} sm={8}>
                    <TextField
                        fullWidth
                        label="Cidade"
                        name="city"
                        value={formValues.city}
                        onChange={handleChange}
                        error={!!cityError}
                        helperText={cityError}
                        required
                    />
                </Grid>
                <Grid item xs={12} sm={4}>
                    <TextField
                        fullWidth
                        label="Estado"
                        name="state"
                        value={formValues.state}
                        onChange={handleChange}
                        error={!!stateError}
                        helperText={stateError}
                        required
                    />
                </Grid>
            </Grid>
        </Box>
    );
};

export default AddressStep;

================
File: src/pages/Signup/components/CepStep/CepStep.tsx
================
import React, { useState } from 'react';
import { TextField, Box, Alert, CircularProgress } from '@mui/material';
import { SignupFormData, ValidationError } from '../../../../types/common';
import { validateCEP } from '../../../../utils/validation';
import { formatCEP } from '../../../../utils/formatters';

interface CepStepProps {
  formValues: SignupFormData;
  errors: ValidationError[];
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleCepBlur: (cep: string) => Promise<void>;
}

const CepStep: React.FC<CepStepProps> = ({ 
  formValues, 
  errors, 
  handleChange, 
  handleCepBlur 
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const cepError = errors.find(error => error.field === 'cep')?.message;

  const handleCepChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\D/g, '');
    const formatted = formatCEP(value);
    
    const event = {
      ...e,
      target: {
        ...e.target,
        name: 'cep',
        value: formatted
      }
    };
    
    handleChange(event);
  };

  const onBlur = async (e: React.FocusEvent<HTMLInputElement>) => {
    const cep = e.target.value.replace(/\D/g, '');
    if (cep && cep.length === 8 && validateCEP(cep)) {
      setIsLoading(true);
      try {
        await handleCepBlur(cep);
      } finally {
        setIsLoading(false);
      }
    }
  };

  return (
    <Box>
      {errors.length > 0 && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {errors[0].message}
        </Alert>
      )}
      
      <TextField
        fullWidth
        label="CEP"
        name="cep"
        value={formValues.cep || ''}
        onChange={handleCepChange}
        onBlur={onBlur}
        error={!!cepError}
        helperText={cepError}
        disabled={isLoading}
        InputProps={{
          endAdornment: isLoading && <CircularProgress size={20} />,
        }}
        placeholder="00000-000"
      />
    </Box>
  );
};

export default CepStep;

================
File: src/pages/Signup/components/EmailStep/EmailStep.tsx
================
import React from 'react';
import { TextField, Box, Alert, Typography } from '@mui/material';
import { SignupFormData, ValidationError } from '../../../../types/common';

interface EmailStepProps {
  formValues: SignupFormData;
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  errors: ValidationError[];
  success?: string;
}

const EmailStep: React.FC<EmailStepProps> = ({ 
  formValues, 
  handleChange, 
  errors, 
  success 
}) => {
  const emailError = errors.find(error => error.field === 'email')?.message;

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.trim().toLowerCase();
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        name: 'email',
        value
      }
    };
    
    handleChange(syntheticEvent);
  };

  return (
    <Box>
      {emailError && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {emailError}
        </Alert>
      )}
      {success && (
        <Alert severity="success" sx={{ mb: 2 }}>
          {success}
        </Alert>
      )}
      
      <Typography variant="body2" color="textSecondary" gutterBottom>
        Enviaremos um código de verificação para confirmar seu email.
      </Typography>

      <TextField
        fullWidth
        label="Email"
        name="email"
        type="email"
        value={formValues.email || ''}
        onChange={handleEmailChange}
        error={!!emailError}
        helperText={emailError}
        placeholder="exemplo@email.com"
        sx={{ mt: 2 }}
      />
    </Box>
  );
};

export default EmailStep;

================
File: src/pages/Signup/components/EmailVerificationStep/EmailVerificationStep.tsx
================
// src/pages/Signup/components/EmailVerificationStep/EmailVerificationStep.tsx

import React from 'react';
import { Box, Typography, TextField, Button, CircularProgress, Alert } from '@mui/material';
import { SignupFormData, ValidationError } from '../../../../types/common';

interface EmailVerificationStepProps {
    formValues: SignupFormData;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    errors: ValidationError[];
    onResendCode: () => Promise<void>;
    onSubmit: (e: React.FormEvent) => Promise<void>;
    isSubmitting: boolean;
    resendTimer: number;
}

const EmailVerificationStep: React.FC<EmailVerificationStepProps> = ({
    formValues,
    handleChange,
    errors,
    onResendCode,
    onSubmit,
    isSubmitting,
    resendTimer
}) => {
    const [verificationError, setVerificationError] = React.useState<string | null>(null);

    return (
        <Box component="form"> {/* Remover onSubmit */}
            {errors.length > 0 && (
                <Alert severity="error" sx={{ mb: 2 }}>
                    {errors[0].message}
                </Alert>
            )}
            <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
                Enviamos um código de verificação para seu email.
                Insira o código abaixo para continuar.
            </Typography>
            <TextField
                fullWidth
                label="Código de Verificação"
                variant="outlined"
                margin="normal"
                name="emailCode"
                value={formValues.emailCode}
                onChange={handleChange}
                error={!!verificationError}
                helperText={verificationError}
                required
                inputProps={{
                    maxLength: 6,
                    pattern: '[0-9]*',
                    inputMode: 'numeric'
                }}
            />
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2 }}>
                <Button
                    variant="text"
                    onClick={onResendCode}
                    disabled={resendTimer > 0 || isSubmitting}
                    sx={{
                        textTransform: 'none',
                        color: 'primary.main'
                    }}
                >
                    {resendTimer > 0 ? `Aguarde ${resendTimer}s` : 'Reenviar código'}
                </Button>
            </Box>
        </Box>
    );
};

export default EmailVerificationStep;

================
File: src/pages/Signup/components/PasswordStep/PasswordStep.tsx
================
import React, { useState, useEffect } from 'react';
import { TextField, Box, Typography, List, ListItem, ListItemIcon, ListItemText, Alert } from '@mui/material';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import CancelIcon from '@mui/icons-material/Cancel';
import { styled } from '@mui/material/styles';
import { SignupFormData, ValidationError } from '../../../../types/common';
import { validatePassword } from '../../../../utils/validation';

interface PasswordRequirement {
  key: 'length' | 'uppercase' | 'lowercase' | 'number' | 'special';
  label: string;
  test: RegExp;
}

interface PasswordValidations {
  length: boolean;
  uppercase: boolean;
  lowercase: boolean;
  number: boolean;
  special: boolean;
}

interface PasswordStepProps {
  formValues: SignupFormData;
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  errors: ValidationError[];
  success?: string;
}

const StyledTextField = styled(TextField)(({ theme }) => ({
  '& .MuiOutlinedInput-root': {
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: theme.shape.borderRadius * 2,
    transition: theme.transitions.create(['box-shadow', 'border-color', 'background-color'], {
      duration: theme.transitions.duration.shorter,
    }),
    '&:hover': {
      backgroundColor: 'rgba(255, 255, 255, 0.08)',
      '& .MuiOutlinedInput-notchedOutline': {
        borderColor: theme.palette.primary.main,
      },
    },
    '&.Mui-focused': {
      backgroundColor: 'rgba(255, 255, 255, 0.08)',
      boxShadow: `0 0 0 2px ${theme.palette.primary.main}25`,
    },
  },
  '& .MuiOutlinedInput-notchedOutline': {
    borderWidth: 1,
    borderColor: 'rgba(241, 196, 15, 0.3)',
  },
  '& .MuiInputLabel-root': {
    color: 'rgba(255, 255, 255, 0.7)',
  },
  '& .MuiOutlinedInput-input': {
    color: '#fff',
  },
}));

const passwordRequirements: PasswordRequirement[] = [
  { key: 'length', label: 'Mínimo de 8 caracteres', test: /.{8,}/ },
  { key: 'uppercase', label: 'Pelo menos uma letra maiúscula', test: /[A-Z]/ },
  { key: 'lowercase', label: 'Pelo menos uma letra minúscula', test: /[a-z]/ },
  { key: 'number', label: 'Pelo menos um número', test: /[0-9]/ },
  { key: 'special', label: 'Pelo menos um caractere especial (!@#$%^&*(),.?":{}|<>)', test: /[!@#$%^&*(),.?":{}|<>]/ },
];

const PasswordStep: React.FC<PasswordStepProps> = ({ formValues, handleChange, errors, success }) => {
  const [validations, setValidations] = useState<PasswordValidations>({
    length: false,
    uppercase: false,
    lowercase: false,
    number: false,
    special: false,
  });

  const [passwordMatch, setPasswordMatch] = useState(false);

  useEffect(() => {
    if (formValues.password) {
      updateValidations(formValues.password);
    }
  }, [formValues.password]);

  useEffect(() => {
    if (formValues.password && formValues.confirmPassword) {
      setPasswordMatch(formValues.password === formValues.confirmPassword);
    } else {
      setPasswordMatch(false);
    }
  }, [formValues.password, formValues.confirmPassword]);

  const updateValidations = (password: string) => {
    setValidations(prev => {
      const newValidations = { ...prev };
      passwordRequirements.forEach(req => {
        newValidations[req.key] = req.test.test(password);
      });
      return newValidations;
    });
  };

  return (
    <Box>
      {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}
      {errors && errors.length > 0 && <Alert severity="error" sx={{ mb: 2 }}>{errors[0].message}</Alert>}

      <StyledTextField
        fullWidth
        type="password"
        name="password"
        label="Senha"
        value={formValues.password}
        onChange={handleChange}
        error={errors.some(error => error.field === 'password')}
        helperText={errors.find(error => error.field === 'password')?.message}
        margin="normal"
      />

      <StyledTextField
        fullWidth
        type="password"
        name="confirmPassword"
        label="Confirme sua senha"
        value={formValues.confirmPassword}
        onChange={handleChange}
        error={errors.some(error => error.field === 'confirmPassword')}
        helperText={errors.find(error => error.field === 'confirmPassword')?.message || 
                   (formValues.confirmPassword && !passwordMatch ? 'As senhas não coincidem' : '')}
        margin="normal"
      />

      <Typography variant="subtitle2" color="textSecondary" sx={{ mt: 2, mb: 1 }}>
        Requisitos da senha:
      </Typography>

      <List dense>
        {passwordRequirements.map((req) => (
          <ListItem key={req.key} sx={{ p: 0 }}>
            <ListItemIcon sx={{ minWidth: 36 }}>
              {validations[req.key] ? (
                <CheckCircleIcon color="success" fontSize="small" />
              ) : (
                <CancelIcon color="error" fontSize="small" />
              )}
            </ListItemIcon>
            <ListItemText 
              primary={req.label}
              primaryTypographyProps={{
                variant: 'body2',
                color: validations[req.key] ? 'textPrimary' : 'error'
              }}
            />
          </ListItem>
        ))}
        <ListItem sx={{ p: 0 }}>
          <ListItemIcon sx={{ minWidth: 36 }}>
            {passwordMatch && formValues.confirmPassword ? (
              <CheckCircleIcon color="success" fontSize="small" />
            ) : (
              <CancelIcon color="error" fontSize="small" />
            )}
          </ListItemIcon>
          <ListItemText 
            primary="As senhas devem coincidir"
            primaryTypographyProps={{
              variant: 'body2',
              color: passwordMatch && formValues.confirmPassword ? 'textPrimary' : 'error'
            }}
          />
        </ListItem>
      </List>
    </Box>
  );
};

export default PasswordStep;

================
File: src/pages/Signup/components/PersonalInfoStep/PersonalInfoStep.tsx
================
import React from 'react';
import { TextField, Box, Typography, Grid } from '@mui/material';
import { SignupFormData, ValidationError } from '../../../../types/common';
import { validateName, validateCPF } from '../../../../utils/validation';
import { formatCPF } from '../../../../utils/formatters';

interface PersonalInfoStepProps {
  formValues: SignupFormData;
  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  errors: ValidationError[];
  success?: string;
}

const PersonalInfoStep: React.FC<PersonalInfoStepProps> = ({ formValues, handleChange, errors, success }) => {
  const nameError = errors.find(error => error.field === 'name')?.message;
  const cpfError = errors.find(error => error.field === 'cpf')?.message;
  const birthDateError = errors.find(error => error.field === 'birthDate')?.message;

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.trim();
    const isValid = validateName(value);
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        value,
        name: 'name'
      }
    };
    
    handleChange(syntheticEvent);
  };

  const handleCPFChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatCPF(e.target.value);
    const isValid = validateCPF(formatted);
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        name: 'cpf',
        value: formatted
      }
    };
    
    handleChange(syntheticEvent);
  };

  const handleBirthDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    const birthDate = new Date(value);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        value,
        name: 'birthDate'
      }
    };
    
    handleChange(syntheticEvent);
  };

  return (
    <Box>
      <Grid container spacing={2}>
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="Nome Completo"
            name="name"
            value={formValues.name}
            onChange={handleNameChange}
            error={!!nameError}
            helperText={nameError || "Digite seu nome completo (nome e sobrenome)"}
            required
            placeholder="João Silva"
            inputProps={{
              maxLength: 100,
              autoComplete: 'name'
            }}
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            label="CPF"
            name="cpf"
            value={formValues.cpf}
            onChange={handleCPFChange}
            error={!!cpfError}
            helperText={cpfError || "Digite apenas números"}
            required
            placeholder="000.000.000-00"
            inputProps={{
              maxLength: 14,
              autoComplete: 'off'
            }}
            InputProps={{
              inputMode: 'numeric'
            }}
            FormHelperTextProps={{
              sx: { 
                position: 'absolute',
                bottom: '-20px'
              }
            }}
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            fullWidth
            label="Data de Nascimento"
            name="birthDate"
            type="date"
            value={formValues.birthDate}
            onChange={handleBirthDateChange}
            error={!!birthDateError}
            helperText={birthDateError || "Você deve ter pelo menos 18 anos"}
            required
            InputLabelProps={{ shrink: true }}
            inputProps={{
              max: new Date(new Date().setFullYear(new Date().getFullYear() - 18)).toISOString().split('T')[0],
              min: new Date(new Date().setFullYear(new Date().getFullYear() - 120)).toISOString().split('T')[0],
              autoComplete: 'bday'
            }}
            FormHelperTextProps={{
              sx: { 
                position: 'absolute',
                bottom: '-20px'
              }
            }}
          />
        </Grid>
      </Grid>
    </Box>
  );
};

export default PersonalInfoStep;

================
File: src/pages/Signup/components/PhoneStep/PhoneStep.tsx
================
import React from 'react';
import { TextField, Box, Alert } from '@mui/material';
import { SignupFormData, ValidationError } from '../../../../types/common';
import { validatePhone } from '../../../../utils/validation';
import { formatPhone } from '../../../../utils/formatters';
import { PhoneStepProps } from '../../../../types/common';

const PhoneStep: React.FC<PhoneStepProps> = ({ formValues, handleChange, errors, success }) => {
  const phoneError = errors.find(error => error.field === 'phone')?.message;

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhone(e.target.value);
    const isValid = validatePhone(formatted);
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        value: formatted,
        name: 'phone'
      }
    };
    
    handleChange(syntheticEvent);
  };

  return (
    <Box>
      {errors.length > 0 && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {errors[0].message}
        </Alert>
      )}
      {success && (
        <Alert severity="success" sx={{ mb: 2 }}>
          {success}
        </Alert>
      )}
      <TextField
        fullWidth
        label="Telefone"
        name="phone"
        value={formValues.phone}
        onChange={handlePhoneChange}
        error={!!phoneError}
        helperText={phoneError || "Digite um número de celular válido com DDD"}
        required
        placeholder="(00) 00000-0000"
        inputProps={{
          maxLength: 15,
          inputMode: 'numeric',
          autoComplete: 'tel'
        }}
      />
    </Box>
  );
};

export default PhoneStep;

================
File: src/pages/Signup/components/PhoneVerificationStep/PhoneVerificationStep.tsx
================
import React, { useState } from 'react';
import { Box, Typography, TextField, Button, Alert } from '@mui/material';
import { PhoneVerificationStepProps } from '../../../../types/common'; // Importe a interface atualizada

const PhoneVerificationStep: React.FC<PhoneVerificationStepProps> = ({
  formValues,
  handleChange,
  errors,
  phoneTimer,
  onResendCode,
}) => {
  const [verificationError, setVerificationError] = useState<string | null>(null);

  const handleResendCode = async () => {
    try {
      await onResendCode(); // Chama a função passada via props
      setVerificationError(null);
    } catch (error) {
      setVerificationError('Falha ao reenviar o código. Tente novamente.');
    }
  };

  return (
    <Box>
      {verificationError && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {verificationError}
        </Alert>
      )}

      <Typography variant="body2" color="textSecondary" paragraph>
        Enviamos um código de verificação para o seu número de telefone.
      </Typography>

      <TextField
        fullWidth
        name="phoneCode"
        label="Código de Verificação"
        value={formValues.phoneCode || ''}
        onChange={handleChange}
        error={errors.some((error) => error.field === 'phoneCode')}
        helperText={errors.find((error) => error.field === 'phoneCode')?.message}
        margin="normal"
        inputProps={{
          maxLength: 6,
          pattern: '[0-9]*',
          inputMode: 'numeric',
        }}
      />

      <Box sx={{ mt: 3, display: 'flex', alignItems: 'center', gap: 2 }}>
        {phoneTimer > 0 ? (
          <Typography variant="body2" color="textSecondary">
            Aguarde {phoneTimer} segundos para reenviar o código.
          </Typography>
        ) : (
          <Button
            variant="text"
            onClick={handleResendCode}
            sx={{ textTransform: 'none' }}
          >
            Reenviar Código
          </Button>
        )}
      </Box>
    </Box>
  );
};

export default PhoneVerificationStep;

================
File: src/pages/Signup/components/StepProgress/StepProgress.tsx
================
import React from 'react';
import { Box, LinearProgress, Typography } from '@mui/material';

interface StepProgressProps {
    activeStep: number;
    totalSteps: number;
}

const StepProgress: React.FC<StepProgressProps> = ({ activeStep, totalSteps }) => {
    const progress = (activeStep / (totalSteps - 1)) * 100;

    return (
        <Box sx={{ width: '100%', mb: 4 }}>
            <LinearProgress
                variant="determinate"
                value={progress}
                sx={{
                    height: 6,
                    borderRadius: 3,
                    backgroundColor: 'rgba(241, 196, 15, 0.1)',
                    '& .MuiLinearProgress-bar': {
                        borderRadius: 3,
                        backgroundImage: 'linear-gradient(45deg, #f1c40f 30%, #f39c12 90%)',
                    },
                }}
            />
            <Typography variant="body2" color="textSecondary" align="right" sx={{ mt: 1 }}>
                {`Passo ${activeStep + 1} de ${totalSteps}`}
            </Typography>
        </Box>
    );
};

export default StepProgress;

================
File: src/pages/Signup/components/SuccessStep/SuccessStep.tsx
================
import React from 'react';
import { Box, Typography, Button } from '@mui/material';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import { useNavigate } from 'react-router-dom';

const SuccessStep: React.FC = () => {
  const navigate = useNavigate();

  return (
    <Box sx={{ textAlign: 'center', py: 4 }}>
      <CheckCircleOutlineIcon
        sx={{
          fontSize: 80,
          color: '#69f0ae',
          mb: 3
        }}
      />
      <Typography
        variant="h5"
        sx={{
          color: 'white',
          fontWeight: 600,
          mb: 2
        }}
      >
        Conta criada com sucesso!
      </Typography>
      <Typography
        variant="body1"
        sx={{
          color: 'rgba(255, 255, 255, 0.7)',
          mb: 3
        }}
      >
        Você já pode fazer login na sua conta YFI Bank.
      </Typography>
    </Box>
  );
};

export default SuccessStep;

================
File: src/pages/Signup/components/TimerDisplay/TimerDisplay.tsx
================
import React from 'react';
import { Typography, Box } from '@mui/material';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import { TimerDisplayProps } from '../../../../types/common';

const TimerDisplay: React.FC<TimerDisplayProps> = ({ timer, isExpiration = false }) => {
  if (timer <= 0) {
    return isExpiration ? (
      <Box display="flex" alignItems="center" gap={1}>
        <AccessTimeIcon fontSize="small" color="error" />
        <Typography variant="body2" color="error">
          Código expirado
        </Typography>
      </Box>
    ) : null;
  }

  const minutes = Math.floor(timer / 60);
  const remainingSeconds = timer % 60;

  const displayText = isExpiration
    ? minutes > 0
      ? `Expira em ${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}`
      : `Expira em ${remainingSeconds} segundos`
    : `Aguarde ${minutes}:${remainingSeconds.toString().padStart(2, '0')} para reenviar`;

  return (
    <Box display="flex" alignItems="center" gap={1}>
      <AccessTimeIcon 
        fontSize="small" 
        color={minutes < 1 ? "warning" : "action"} 
      />
      <Typography 
        variant="body2" 
        color={minutes < 1 ? "warning.main" : "textSecondary"}
      >
        {displayText}
      </Typography>
    </Box>
  );
};

export default TimerDisplay;

================
File: src/pages/Signup/index.tsx
================
import React, { useState, useEffect } from 'react';
import { Box, Container, Typography, Card, CardContent, Button, Alert, CircularProgress } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { useSignupStore } from '../../stores/signupStore';
import { formatPhone, formatCPF, formatCEP } from '../../utils/formatters';
import { validatePhone, validateCPF, validateName, validatePassword, validateCEP, validateEmail } from '../../utils/validation';
import PhoneStep from './components/PhoneStep/PhoneStep';
import PhoneVerificationStep from './components/PhoneVerificationStep/PhoneVerificationStep';
import EmailStep from './components/EmailStep/EmailStep';
import PasswordStep from './components/PasswordStep/PasswordStep';
import PersonalInfoStep from './components/PersonalInfoStep/PersonalInfoStep';
import CepStep from './components/CepStep/CepStep';
import AddressStep from './components/AddressStep/AddressStep';
import SuccessStep from './components/SuccessStep/SuccessStep';
import StepProgress from './components/StepProgress/StepProgress';
import { ValidationError } from '../../types/common';
import { api } from '../../services/api';

const steps = [
  'Phone',
  'Phone Verification',
  'Email',
  'Password',
  'Personal Info',
  'CEP',
  'Address',
  'Success',
] as const;

const SignupPage: React.FC = () => {
  const navigate = useNavigate();
  const { signUp } = useAuth();
  const {
    formData,
    setFormData,
    activeStep,
    setActiveStep,
    isSubmitting,
    setIsSubmitting,
    resetStore,
  } = useSignupStore();
  const [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [phoneTimer, setPhoneTimer] = useState(60);

  // Timer countdown for phone verification
  useEffect(() => {
    if (phoneTimer > 0) {
      const interval = setInterval(() => setPhoneTimer((prev) => prev - 1), 1000);
      return () => clearInterval(interval);
    }
  }, [phoneTimer]);

  // Handle form field changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // Handle CEP blur (fetch address data)
  const handleCepBlur = async (cep: string) => {
    try {
      const response = await api.get(`https://viacep.com.br/ws/${cep}/json/`);
      if (response.data && !response.data.erro) {
        const { logradouro, bairro, localidade, uf } = response.data;
        setFormData({
          ...formData,
          street: logradouro,
          neighborhood: bairro,
          city: localidade,
          state: uf,
        });
      } else {
        setValidationErrors([{ field: 'cep', message: 'CEP not found' }]);
      }
    } catch (error) {
      setValidationErrors([{ field: 'cep', message: 'Error fetching CEP data' }]);
    }
  };

  // Validate current step
  const validateStep = () => {
    const errors: ValidationError[] = [];
  
    switch (steps[activeStep]) {
      case 'Phone':
        if (!formData.phone || !validatePhone(formData.phone)) {
          errors.push({ field: 'phone', message: 'Invalid phone number' });
        }
        break;
      case 'Phone Verification':
        if (!formData.phoneCode) {
          errors.push({ field: 'phoneCode', message: 'Verification code is required' });
        }
        break;
      case 'Email':
        if (!formData.email || !validateEmail(formData.email)) {
          errors.push({ field: 'email', message: 'Invalid email address' });
        }
        break;
      case 'Password':
        if (!formData.password || !validatePassword(formData.password).isValid) {
          errors.push({ field: 'password', message: 'Password does not meet requirements' });
        }
        if (formData.password !== formData.confirmPassword) {
          errors.push({ field: 'confirmPassword', message: 'Passwords do not match' });
        }
        break;
      case 'Personal Info':
        if (!formData.name || !validateName(formData.name)) {
          errors.push({ field: 'name', message: 'Invalid name' });
        }
        if (!formData.cpf || !validateCPF(formData.cpf)) {
          errors.push({ field: 'cpf', message: 'Invalid CPF' });
        }
        break;
      case 'CEP':
        if (!formData.cep || !validateCEP(formData.cep)) {
          errors.push({ field: 'cep', message: 'Invalid CEP' });
        }
        break;
      default:
        break;
    }
  
    setValidationErrors(errors);
    return errors.length === 0;
  };

  // Handle next step
  const handleNext = async () => {
    if (!validateStep()) return;
  
    try {
      setIsSubmitting(true);
      setError('');
      setSuccess('');
  
      if (steps[activeStep] === 'Phone') {
        // Send phone verification code
        await api.post('/auth/send-verification-code', { phone: formData.phone });
        setPhoneTimer(60);
        setActiveStep((prev) => prev + 1);
      } else if (steps[activeStep] === 'Phone Verification') {
        // Verify phone code
        await api.post('/auth/verify-code', { code: formData.phoneCode, phone: formData.phone });
        setActiveStep((prev) => prev + 1);
      } else if (steps[activeStep] === 'Address') {
        // Register user with Supabase
        const user = await signUp(formData.email, formData.password, {
          name: formData.name,
          phone: formData.phone,
          cpf: formData.cpf,
          birthDate: formData.birthDate,
          address: {
            cep: formData.cep,
            street: formData.street,
            number: formData.number,
            complement: formData.complement,
            neighborhood: formData.neighborhood,
            city: formData.city,
            state: formData.state,
          },
        });
  
        // Only proceed to the next step if signUp is successful
        if (user) {
          setActiveStep((prev) => prev + 1);
        } else {
          throw new Error('Signup failed');
        }
      } else {
        setActiveStep((prev) => prev + 1);
      }
    } catch (error: any) {
      setError(error.message || 'An error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle back step
  const handleBack = () => {
    setActiveStep((prev) => prev - 1);
  };

  // Render current step content
  const getStepContent = (step: number) => {
    switch (steps[step]) {
      case 'Phone':
        return (
          <PhoneStep
            formValues={formData}
            handleChange={handleChange}
            errors={validationErrors}
            onResendCode={async () => {
              await api.post('/auth/send-verification-code', { phone: formData.phone });
              setPhoneTimer(60);
            }}
          />
        );
      case 'Phone Verification':
        return (
          <PhoneVerificationStep
            formValues={formData}
            handleChange={handleChange}
            errors={validationErrors}
            phoneTimer={phoneTimer}
            onResendCode={async () => {
              await api.post('/auth/send-verification-code', { phone: formData.phone });
              setPhoneTimer(60);
            }}
          />
        );
      case 'Email':
        return <EmailStep formValues={formData} handleChange={handleChange} errors={validationErrors} />;
      case 'Password':
        return <PasswordStep formValues={formData} handleChange={handleChange} errors={validationErrors} />;
      case 'Personal Info':
        return <PersonalInfoStep formValues={formData} handleChange={handleChange} errors={validationErrors} />;
      case 'CEP':
        return <CepStep formValues={formData} handleChange={handleChange} errors={validationErrors} handleCepBlur={handleCepBlur} />;
      case 'Address':
        return <AddressStep formValues={formData} handleChange={handleChange} errors={validationErrors} />;
      case 'Success':
        return <SuccessStep />;
      default:
        return <Typography>Step not found</Typography>;
    }
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        background: 'linear-gradient(45deg, #121212 30%, #1e1e1e 90%)',
        display: 'flex',
        alignItems: 'center',
        py: 4,
      }}
    >
      <Container maxWidth="sm">
        <Card
          elevation={24}
          sx={{
            borderRadius: 4,
            background: 'rgba(30, 30, 30, 0.95)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(241, 196, 15, 0.1)',
          }}
        >
          <CardContent sx={{ p: 4 }}>
            <Box sx={{ mb: 4, textAlign: 'center' }}>
              <Typography variant="h4" sx={{ color: 'white', fontWeight: 700, mb: 1 }}>
                {steps[activeStep]}
              </Typography>
            </Box>

            <StepProgress activeStep={activeStep} totalSteps={steps.length} />

            <Box sx={{ my: 4 }}>
              {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
              {success && <Alert severity="success" sx={{ mb: 2 }}>{success}</Alert>}
              {getStepContent(activeStep)}
            </Box>

            {activeStep < steps.length - 1 && (
              <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4, pt: 3, borderTop: '1px solid rgba(241, 196, 15, 0.1)' }}>
                <Button
                  variant="outlined"
                  onClick={handleBack}
                  disabled={activeStep === 0 || isSubmitting}
                  sx={{
                    borderRadius: 2,
                    borderColor: 'rgba(241, 196, 15, 0.5)',
                    color: 'primary.main',
                    '&:hover': {
                      borderColor: 'primary.main',
                      backgroundColor: 'rgba(241, 196, 15, 0.08)',
                    },
                  }}
                >
                  Back
                </Button>
                <Button
                  variant="contained"
                  onClick={handleNext}
                  disabled={isSubmitting}
                  sx={{
                    borderRadius: 2,
                    bgcolor: 'primary.main',
                    color: 'black',
                    fontWeight: 600,
                    '&:hover': {
                      bgcolor: 'primary.light',
                    },
                  }}
                >
                  {isSubmitting ? <CircularProgress size={24} /> : 'Next'}
                </Button>
              </Box>
            )}

            {activeStep === steps.length - 1 && (
              <Box textAlign="center" mt={4}>
                <Button
                  variant="contained"
                  onClick={() => navigate('/login')}
                  sx={{
                    fontWeight: 600,
                  }}
                >
                  Go to Login
                </Button>
              </Box>
            )}
          </CardContent>
        </Card>
      </Container>
    </Box>
  );
};

export default SignupPage;

================
File: src/pages/Sobre/components/HeroSection/HeroSection.tsx
================
import React from 'react';
import { Box, Typography, Container, Grid, CardMedia } from '@mui/material';
import cryptoSobreImage from '../../../../assets/cryptoSobre.jpg';
import { motion } from 'framer-motion';
import { AboutSectionProps } from '../../../../types/common';

const HeroSection: React.FC<AboutSectionProps['hero']> = () => {
    return (
        <Box
            component="section"
            sx={{
                pt: 12,
                pb: 8,
                position: 'relative',
                overflow: 'hidden'
            }}
        >
            <Container maxWidth="lg">
                <Grid container spacing={4} alignItems="center">
                    <Grid item xs={12} md={7}>
                        <motion.div
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.8 }}
                        >
                            <CardMedia
                                component="img"
                                image={cryptoSobreImage}
                                alt="Cryptocurrency illustration"
                                sx={{
                                    width: '90%',
                                    height: 350,
                                    objectFit: 'cover',
                                    borderRadius: '16px',
                                    transform: { xs: 'scale(0.9)', md: 'scale(1)' },
                                    transition: 'transform 0.3s ease-in-out',
                                    '&:hover': {
                                        transform: 'scale(1.02)'
                                    }
                                }}
                            />
                        </motion.div>
                    </Grid>
                    <Grid item xs={12} md={5}>
                        <motion.div
                            initial={{ opacity: 0, x: 20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ duration: 0.8 }}
                        >
                            <Typography
                                variant="h2"
                                component="h1"
                                color="common.white"
                                gutterBottom
                                sx={{ 
                                    fontWeight: 'bold',
                                    mb: 3
                                }}
                            >
                                Conheça o YFI Bank
                            </Typography>
                            <Typography
                                variant="h5"
                                color="primary.main"
                                sx={{
                                    maxWidth: '600px',
                                    opacity: 0.9,
                                    mb: { xs: 4, md: 0 }
                                }}
                            >
                                Reimaginando o que um banco pode fazer por você. Nossa missão é combinar
                                inovação tecnológica com um serviço bancário premium, feito para atender você.
                            </Typography>
                        </motion.div>
                    </Grid>
                </Grid>
            </Container>
        </Box>
    );
}

export default HeroSection;

================
File: src/pages/Sobre/components/ValuesSection/ValuesSection.tsx
================
import React from 'react';
import { Box, Typography, Container, Grid, Card, CardContent } from '@mui/material';
import { motion } from 'framer-motion';
import StarIcon from '@mui/icons-material/Star';
import VisibilityIcon from '@mui/icons-material/Visibility';
import LightbulbIcon from '@mui/icons-material/Lightbulb';
import { useTheme } from '@mui/material/styles';
import { ValueItem, AboutSectionProps } from '../../../../types/common';

const ValuesSection: React.FC<AboutSectionProps['values']> = () => {
    const theme = useTheme();
    
    const values: ValueItem[] = [
        {
            icon: <StarIcon fontSize="large" sx={{ color: theme.palette.primary.main }} />,
            title: 'Excelência',
            description: 'Os mais altos padrões em cada interação'
        },
        {
            icon: <VisibilityIcon fontSize="large" sx={{ color: theme.palette.primary.main }} />,
            title: 'Transparência',
            description: 'Sua confiança é nossa prioridade'
        },
        {
            icon: <LightbulbIcon fontSize="large" sx={{ color: theme.palette.primary.main }} />,
            title: 'Inovação',
            description: 'Soluções financeiras criadas para o futuro'
        }
    ];

    return (
        <Box
            component="section"
            sx={{
                backgroundColor: theme.palette.background.default,
                py: 8
            }}
        >
            <Container maxWidth="lg">
                <Typography
                    variant="h2"
                    component="h2"
                    align="center"
                    color="secondary"
                    gutterBottom
                    sx={{ mb: 6 }}
                >
                    Nossos Valores
                </Typography>
                <Grid container spacing={4}>
                    {values.map((item, index) => (
                        <Grid item xs={12} md={4} key={index}>
                            <motion.div
                                initial={{ opacity: 0, y: 20 }}
                                whileInView={{ opacity: 1, y: 0 }}
                                transition={{ duration: 0.5, delay: index * 0.2 }}
                                viewport={{ once: true }}
                                style={{ height: '100%' }}
                            >
                                <Card
                                    sx={{
                                        height: '100%',
                                        display: 'flex',
                                        flexDirection: 'column',
                                        backgroundColor: 'rgba(30, 30, 30, 0.6)',
                                        backdropFilter: 'blur(10px)',
                                        borderRadius: '24px',
                                        padding: 3,
                                        position: 'relative',
                                        overflow: 'hidden',
                                        transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
                                        '&:hover': {
                                            transform: 'translateY(-8px) scale(1.02)',
                                            boxShadow: '0 12px 20px rgba(241, 196, 15, 0.1)',
                                            border: '1px solid rgba(241, 196, 15, 0.3)',
                                        },
                                    }}
                                >
                                    <CardContent sx={{ flexGrow: 1, textAlign: 'center', p: 3 }}>
                                        <Box sx={{ mb: 2 }}>
                                            {item.icon}
                                        </Box>
                                        <Typography variant="h5" component="h3" gutterBottom sx={{ fontWeight: 'bold', color: theme.palette.secondary.main }}>
                                            {item.title}
                                        </Typography>
                                        <Typography variant="body1" color="text.secondary">
                                            {item.description}
                                        </Typography>
                                    </CardContent>
                                </Card>
                            </motion.div>
                        </Grid>
                    ))}
                </Grid>
            </Container>
        </Box>
    );
}

export default ValuesSection;

================
File: src/pages/Sobre/components/VisionSection/VisionSection.tsx
================
import React from 'react';
import { Box, Typography, Container, Grid } from '@mui/material';
import { motion } from 'framer-motion';
import { VisionItem, AboutSectionProps } from '../../../../types/common';

const VisionSection: React.FC<AboutSectionProps['vision']> = () => {
    const items: VisionItem[] = [
        {
            title: 'Visão',
            content: 'Redefinindo o conceito de banco ao combinar confiança e inovação.'
        },
        {
            title: 'Missão',
            content: 'Entregar soluções financeiras personalizadas com a tecnologia mais avançada e segurança incomparável.'
        }
    ];

    return (
        <Box
            component="section"
            sx={{
                color: '#ffffff',
                paddingY: 12
            }}
        >
            <Container maxWidth="lg">
                <Grid container spacing={6} justifyContent="center" alignItems="stretch">
                    {items.map((item, index) => (
                        <Grid item key={index} xs={12} md={6}>
                            <motion.div
                                initial={{ opacity: 0, y: 20 }}
                                whileInView={{ opacity: 1, y: 0 }}
                                transition={{ duration: 0.5, delay: index * 0.2 }}
                                viewport={{ once: true }}
                            >
                                <Box 
                                    sx={{
                                        display: 'flex',
                                        flexDirection: 'column',
                                        height: '100%',
                                        alignItems: 'center',
                                        textAlign: 'center',
                                        padding: 6,
                                        borderRadius: 4,
                                    }}
                                >
                                    <Typography variant="h3" gutterBottom sx={{ color: 'secondary.main', mb: 4 }}>
                                        {item.title}
                                    </Typography>
                                    <Typography variant="h5" sx={{ color: '#f1c40f', flexGrow: 1, lineHeight: 1.6 }}>
                                        {item.content}
                                    </Typography>
                                </Box>
                            </motion.div>
                        </Grid>
                    ))}
                </Grid>
            </Container>
        </Box>
    );
}

export default VisionSection;

================
File: src/pages/Sobre/index.tsx
================
import React from 'react';
import HeroSection from './components/HeroSection/HeroSection';
import VisionSection from './components/VisionSection/VisionSection';
import ValuesSection from './components/ValuesSection/ValuesSection';
import WhyChooseSection from '../../components/common/WhyChooseSection/WhyChooseSection';
import CTASection from '../../components/common/CTASection/CTASection';

const SobrePage: React.FC = () => {
    return (
        <>
            <HeroSection />
            <VisionSection />
            <ValuesSection />
            <WhyChooseSection />
            <CTASection />
        </>
    );
};

export default SobrePage;

================
File: src/services/api.ts
================
import axios, { AxiosResponse } from 'axios';
import { ApiResponse } from '../types/common'; // Importe a interface

// Create an axios instance with base configurations
export const api = axios.create({
    baseURL: import.meta.env.VITE_BACKEND_URL || 'http://localhost:3000',
    headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
    },
});

// Request interceptor to add the token to every request
api.interceptors.request.use((config) => {
    const token = localStorage.getItem('token');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

// Response interceptor to handle errors globally
api.interceptors.response.use(
    (response: AxiosResponse<ApiResponse>) => {
        if (response.data.error) {
            console.error('API Error:', response.data.error);
            return Promise.reject(new Error(response.data.error));
        }
        return response;
    },
    (error) => {
        if (error.response) {
            console.error('API Error:', error.response.data);
        } else {
            console.error('API Error:', error.message);
        }
        return Promise.reject(error);
    }
);

================
File: src/services/supabaseClient.ts
================
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Supabase URL and Anon Key are required.');
}

export const supabase = createClient(supabaseUrl, supabaseKey);

================
File: src/stores/appStore.ts
================
import { create } from 'zustand';

interface AppState {
  estimatedTotalAssets: number;
  setEstimatedTotalAssets: (amount: number) => void;
}

export const useAppStore = create<AppState>((set) => ({
  estimatedTotalAssets: 0,
  setEstimatedTotalAssets: (amount) => set({ estimatedTotalAssets: amount }),
}));

================
File: src/stores/signupStore.ts
================
import { create } from 'zustand';
import { SignupFormData } from '../types/common';

interface SignupStore {
  formData: SignupFormData;
  activeStep: number;
  setFormData: (data: Partial<SignupFormData>) => void;
  setActiveStep: (step: number | ((prev: number) => number)) => void;
  resetStore: () => void;
  isSubmitting: boolean;
  setIsSubmitting: (isSubmitting: boolean) => void;
  signup: (data: SignupFormData) => Promise<void>;
  sendPhoneCode: (phone: string) => Promise<void>;
}

const initialState: SignupFormData = {
  email: '',
  emailCode: '',
  phone: '',
  phoneCode: '',
  name: '',
  cpf: '',
  birthDate: '',
  cep: '',
  street: '',
  number: '',
  complement: '',
  neighborhood: '',
  city: '',
  state: '',
  password: '',
  confirmPassword: '',
  token: '',
};

export const useSignupStore = create<SignupStore>((set) => ({
  formData: initialState,
  activeStep: 0,
  setFormData: (data) =>
    set((state) => ({
      formData: { ...state.formData, ...data },
    })),
  setActiveStep: (step) =>
    set((state) => ({
      activeStep: typeof step === 'function' ? step(state.activeStep) : step,
    })),
  resetStore: () =>
    set({
      formData: initialState,
      activeStep: 0,
    }),
  isSubmitting: false,
  setIsSubmitting: (isSubmitting) => set({ isSubmitting }),
  signup: async (data) => {
    console.log('signup', data);
    await new Promise((resolve) => setTimeout(resolve, 1000));
  },
  sendPhoneCode: async (phone) => {
    console.log('sendPhoneCode', phone);
    await new Promise((resolve) => setTimeout(resolve, 1000));
  },
}));

================
File: src/theme.tsx
================
// src/theme.tsx
import { createTheme, Theme } from '@mui/material/styles';

declare module '@mui/material/styles' {
    interface Theme {
        status: {
            danger: string;
        };
    }
    interface ThemeOptions {
        status?: {
            danger?: string;
        };
    }
}

const theme: Theme = createTheme({
    palette: {
        mode: 'dark', // Define o modo escuro
        primary: {
            main: '#f1c40f', // Amarelo vibrante para destaques
        },
        secondary: {
            main: '#ffffff', // Branco para texto e elementos contrastantes
        },
        background: {
            default: '#121212', // Preto quase absoluto para fundo principal
            paper: '#1e1e1e', // Fundo para componentes como cards e AppBar
        },
        text: {
            primary: '#ffffff',
            secondary: '#f1c40f', // Amarelo para textos de destaque
        },
    },
    typography: {
        fontFamily: 'Roboto, sans-serif',
        h1: {
            fontWeight: 700,
            fontSize: '3rem',
            marginBottom: '1rem',
        },
        h2: {
            fontWeight: 700,
            fontSize: '2.5rem',
            marginBottom: '1rem',
        },
        h3: {
            fontWeight: 700,
            fontSize: '2rem',
            marginBottom: '1rem',
        },
        body1: {
            fontSize: '1rem',
            color: '#f1c40f',
        },
        button: {
            textTransform: 'none',
            fontWeight: 'bold',
        },
    },
    components: {
        MuiButton: {
            styleOverrides: {
                root: {
                    borderRadius: '12px',
                    textTransform: 'none',
                }
            }
        },
        MuiAppBar: {
            styleOverrides: {
                root: {
                    backgroundColor: '#1e1e1e',
                },
            },
        },
        MuiCard: {
            styleOverrides: {
                root: {
                    transition: 'all 0.3s ease',
                }
            }
        }
    },
    breakpoints: {
        values: {
            xs: 0,
            sm: 600,
            md: 960,
            lg: 1280,
            xl: 1920,
        }
    }
});

export default theme;

================
File: src/types/common.ts
================
import { ReactNode } from 'react';
import { ButtonProps, BoxProps, ListItemProps } from '@mui/material';
import { LinkProps as RouterLinkProps } from 'react-router-dom';

// Augment Material-UI types to work with React Router
declare module '@mui/material/Button' {
    interface ButtonPropsColorOverrides {
        custom: true;
    }
}

// User related types
export interface Address {
    cep: string;
    street: string;
    number: string;
    complement?: string;
    neighborhood: string;
    city: string;
    state: string;
}

export interface User {
    id: string;
    name: string;
    email: string;
    cpf: string;
    phone: string;
    birthDate: string;
    address: Address;
    emailVerified?: boolean;
    phoneVerified?: boolean;
    createdAt?: string;
    updatedAt?: string;
}

// Route related types
export interface Route {
    path: string;
    element: ReactNode;
}

// Extending MUI's ButtonProps to include RouterLink props
export interface CustomButtonProps extends ButtonProps {
    component?: React.ElementType;
    to?: string;
}

// Contact page types
export interface ContactChannel {
    icon: React.ReactNode;
    title: string;
    description: string;
    contact: string;
    action: (() => void) | null;
}

export interface ContactChannelsSectionProps {
    channels?: ContactChannel[];
}

// Section related types - exactly matching the current implementation
export interface CTASectionProps {
    title?: string;
    description?: string;
    buttonText?: string;
    onButtonClick?: () => void;
}

export interface WhyChooseSectionFeature {
    icon: ReactNode;
    title: string;
    description: string;
}

export interface WhyChooseSectionProps {
    features?: WhyChooseSectionFeature[];
}

// Navigation types
export interface NavItem {
    label: string;
    to: string;
}

// Layout component types
export interface HeaderProps {
    navItems?: NavItem[];
}

export interface FooterProps {
    socialLinks?: {
        linkedin?: string;
        instagram?: string;
        twitter?: string;
    };
}

// Home page types

export interface SecurityFeature {
    icon: JSX.Element;
    title: string;
    description: string;
}

export interface FAQ {
    question: string;
    answer: string;
}

export interface SignupStep {
    number: string;
    title: string;
    description: string;
    icon: JSX.Element;
}

export interface Feature {
    icon: JSX.Element;
    title: string;
    description: string;
}

export interface CoinInfo {
    id: string;
    name: string;
    symbol: string;
    icon: string;
}

export interface CryptoData {
    name: string;
    symbol: string;
    icon: string;
    price: string;
    variation: string;
}

export interface SliderSettings {
    dots: boolean;
    infinite: boolean;
    speed: number;
    slidesToShow: number;
    slidesToScroll: number;
    arrows: boolean;
    autoplay: boolean;
    autoplaySpeed: number;
    cssEase: string;
    pauseOnHover: boolean;
    swipe: boolean;
    adaptiveHeight: boolean;
    variableWidth: boolean;
    waitForAnimate: boolean;
    responsive: Array<{
        breakpoint: number;
        settings: {
            slidesToShow: number;
        };
    }>;
}

// Servicos page types

export interface Service {
    icon: JSX.Element;
    title: string;
    description: string;
}

// Signup page types
export interface SignupFormData {
    email: string;
    emailCode: string;
    phoneCode: string;
    phone: string;
    name: string;
    cpf: string;
    birthDate: string;
    cep: string;
    street: string;
    number: string;
    complement?: string;
    neighborhood: string;
    city: string;
    state: string;
    password: string;
    confirmPassword: string;
    token: string;
}

export interface ValidationError {
    field: keyof SignupFormData; // Ensures 'field' is a valid key of SignupFormData
    message: string;
  }

export interface AddressData {
    logradouro: string;
    bairro: string;
    localidade: string;
    uf: string;
    erro?: boolean;
}

export interface StepValidation {
    isValid: boolean;
    errors: ValidationError[];
}

// Timer related types
export interface TimerDisplayProps {
    timer: number;
    seconds?: number;
    isExpiration?: boolean;
}

// Email Verification Step Props
export interface EmailVerificationStepProps {
    errors: ValidationError[];
    emailTimer: number;
    onResendCode: () => Promise<void>;
    onSubmit: (e: React.FormEvent) => void;
    formValues?: SignupFormData;
    handleChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

export interface PhoneStepProps {
    formValues: SignupFormData;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    errors: ValidationError[];
    success?: string;
    onResendCode: () => Promise<void>; 
  }  

export interface PhoneVerificationStepProps {
    formValues: SignupFormData;
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    errors: ValidationError[];
    phoneTimer: number;
    onResendCode: () => Promise<void>; 
  }

export interface CepStepProps {
    formValues: SignupFormData;
    errors: ValidationError[];
    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    handleCepBlur: (cep: string) => Promise<void>;
}

// About page types
export interface VisionItem {
    title: string;
    content: string;
}

export interface ValueItem {
    icon: React.ReactNode;
    title: string;
    description: string;
}

export interface AboutSectionProps {
    hero?: {};
    vision?: {};
    values?: {};
}

// Login page types
export interface LoginFormData {
    email: string;
    password: string;
}

// Authentication response type
export interface AuthResponse {
    user: {
        id: string;
        email: string;
        // outros campos que o Supabase retorna
    };
    session: {
        access_token: string;
        // outros campos da sessão
    };
}
export interface ApiResponse<T = any> {
    data?: T;
    error?: string;
    message?: string;
}

================
File: src/types/images.d.ts
================
declare module '*.jpg' {
    const content: string;
    export default content;
}

declare module '*.png' {
    const content: string;
    export default content;
}

declare module '*.svg' {
    const content: string;
    export default content;
}

================
File: src/utils/formatters.ts
================
// formatters.ts

export const formatPhone = (value: string): string => {
    const numbers = value.replace(/\D/g, '');
    if (numbers.length === 0) return '';
    if (numbers.length <= 2) return numbers;
    if (numbers.length <= 7) return `(${numbers.slice(0, 2)}) ${numbers.slice(2)}`;
    return `(${numbers.slice(0, 2)}) ${numbers.slice(2, 7)}-${numbers.slice(7, 11)}`;
};
  
export const formatCPF = (value: string): string => {
    const numbers = value.replace(/\D/g, '').substring(0, 11);
    if (numbers.length <= 3) return numbers;
    if (numbers.length <= 6) return `${numbers.slice(0, 3)}.${numbers.slice(3)}`;
    if (numbers.length <= 9) return `${numbers.slice(0, 3)}.${numbers.slice(3, 6)}.${numbers.slice(6)}`;
    return `${numbers.slice(0, 3)}.${numbers.slice(3, 6)}.${numbers.slice(6, 9)}-${numbers.slice(9)}`;
};
  
export const formatCEP = (value: string): string => {
    // Remove qualquer caractere que não seja número
    const numbers = value.replace(/\D/g, '');
    
    // Limita a 8 dígitos
    const cep = numbers.substring(0, 8);
    
    // Se não tiver números, retorna vazio
    if (cep.length === 0) return '';
    
    // Se tiver 5 ou menos dígitos, não formata
    if (cep.length <= 5) return cep;
    
    // Formata com o hífen
    return `${cep.slice(0, 5)}-${cep.slice(5)}`;
};

export const formatDate = (dateStr: string): string => {
    try {
        // Pega apenas a parte da data (antes do T se existir)
        const datePart = dateStr.split('T')[0];
        
        // Divide em ano, mês e dia
        const [year, month, day] = datePart.split('-');
        
        // Garante que mês e dia tenham dois dígitos
        const formattedDay = day.padStart(2, '0');
        const formattedMonth = month.padStart(2, '0');
        
        // Retorna no formato dd/mm/yyyy
        return `${formattedDay}/${formattedMonth}/${year}`;
    } catch (error) {
        console.error('Erro ao formatar data:', error);
        return dateStr; // Retorna a string original em caso de erro
    }
};

export const formatCurrency = (value: number): string => {
    return new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL',
    }).format(value);
};

================
File: src/utils/sanitizers.ts
================
import DOMPurify from 'dompurify';

// Sanitiza strings para prevenir XSS
export const sanitizeString = (value: string): string => {
    if (!value) return '';
    return DOMPurify.sanitize(value, { ALLOWED_TAGS: [] });
};

// Sanitiza objetos recursivamente
export const sanitizeObject = <T extends object>(obj: T): T => {
    const sanitized = { ...obj };
    Object.keys(sanitized).forEach(key => {
        const value = sanitized[key as keyof T];
        if (typeof value === 'string') {
            sanitized[key as keyof T] = sanitizeString(value) as T[keyof T];
        } else if (value && typeof value === 'object' && !Array.isArray(value)) {
            sanitized[key as keyof T] = sanitizeObject(value) as T[keyof T];
        }
    });
    return sanitized;
};

// Sanitiza HTML permitindo apenas tags específicas
export const sanitizeHTML = (html: string): string => {
    return DOMPurify.sanitize(html, {
        ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'a'],
        ALLOWED_ATTR: ['href']
    });
};

================
File: src/utils/validation.ts
================
// validation.ts
import { ValidationError } from '../types/common';

// Validation functions
export const validateEmail = (email: string): boolean => {
    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return re.test(email);
  };
  
  export const validatePhone = (phone: string): boolean => {
    // Remove non-digits
    const numbers = phone.replace(/\D/g, '');
    return numbers.length === 11;
  };
  
  export const validateCPF = (cpf: string): boolean => {
    // Remove non-digits
    cpf = cpf.replace(/\D/g, '');

    // Check length
    if (cpf.length !== 11) return false;

    // Check if all digits are the same
    if (/^(\d)\1{10}$/.test(cpf)) return false;

    // Validate digits
    let sum = 0;
    let remainder;

    for (let i = 1; i <= 9; i++) {
      sum = sum + parseInt(cpf.substring(i - 1, i)) * (11 - i);
    }

    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cpf.substring(9, 10))) return false;

    sum = 0;
    for (let i = 1; i <= 10; i++) {
      sum = sum + parseInt(cpf.substring(i - 1, i)) * (12 - i);
    }

    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cpf.substring(10, 11))) return false;

    return true;
  };
  
  export const validateName = (name: string): boolean => {
    // Check if name has at least two words (first and last name)
    const nameParts = name.trim().split(/\s+/);
    if (nameParts.length < 2) return false;

    // Check if all parts contain only letters
    return nameParts.every(part => /^[a-zA-ZÀ-ÿ]+$/.test(part));
  };
  
  export const validatePassword = (password: string): { isValid: boolean; errors: ValidationError[] } => {
    const errors: ValidationError[] = [];
    
    if (password.length < 8) {
      errors.push({
        field: 'password',
        message: 'A senha deve ter pelo menos 8 caracteres'
      });
    }
    if (!/[A-Z]/.test(password)) {
      errors.push({
        field: 'password',
        message: 'A senha deve conter pelo menos uma letra maiúscula'
      });
    }
    if (!/[a-z]/.test(password)) {
      errors.push({
        field: 'password',
        message: 'A senha deve conter pelo menos uma letra minúscula'
      });
    }
    if (!/[0-9]/.test(password)) {
      errors.push({
        field: 'password',
        message: 'A senha deve conter pelo menos um número'
      });
    }
    if (!/[!@#$%^&*]/.test(password)) {
      errors.push({
        field: 'password',
        message: 'A senha deve conter pelo menos um caractere especial (!@#$%^&*)'
      });
    }
  
    return {
      isValid: errors.length === 0,
      errors
    };
  };
  
  export const validateCEP = (cep: string): boolean => {
    // Remove non-digits
    const numbers = cep.replace(/\D/g, '');
    return numbers.length === 8;
  };

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "types": ["node"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "ESNext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}

================
File: vite.config.jsx
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
